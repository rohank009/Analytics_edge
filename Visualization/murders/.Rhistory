plot(horsepower,mpg)
identify(horsepower,mpg,name)
summary(auto)
summary(cylinders)
summary(mpg)
rm(list=ls())
college=read.csv(D:/Analytics/Statistical_learning/Data/college.csv)
college=read.csv(D:\Analytics\Statistical_learning\Data\college.csv)
college=read.csv("D:\Analytics\Statistical_learning\Data\college.csv"")
college=read.csv("D:\Analytics\Statistical_learning\Data\college.csv")
college=read.csv("D:/Analytics/Statistical_learning/Data/college.csv")
fix(college)
rownames(college)=college[,1]
fix(college)
fix(college)
str(college)
college[1]
college[2,1]
college=read.csv("D:/Analytics/Statistical_learning/Data/college.csv")
college[2,1]
str(college)
college[1,]
rownames(college)
rownames(college)=college[,1]
college[1,]
fix(college)
college=college[,-1]
fix(college)
fix(college)
summary(college)
?pairs
pairs(college[,1:10])
pairs(college[,1:2])
pairs(college[,1:1])
pairs(college[,1])
?boxplot
?plot
plot(college$private,college$outstate)
plot(factor(college$private),college$outstate)
pripub=factor(college$private)
str(pripub)
pripub=as.factor(college$private)
str(pripub)
pripub=as.factor(college$Private)
plot(as.factor(college$Private),college$Outstate)
plot(as.factor(college$Private),college$Outstate,xlab="Private",ylab="Outstate", main="Provate VS Outstate")
plot(as.factor(college$Private),college$Outstate,xlab="Private",ylab="Outstate", main="Private VS Outstate")
Elite=rep("No",nrow(college))
str(Elite)
Elite[college$Top10perc>50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
fix(college)
str(Elite)
summary(college)
plot(as.factor(college$Elite),college$Outstate,xlab="Elite",ylab="Outstate", main="Elite VS Outstate")
?hist
par(mfrow=c(2,2))
plot(as.factor(college$Elite),college$Outstate,xlab="Elite",ylab="Outstate", main="Elite VS Outstate")
hist(college$apps,college$accept)
hist(college$Apps,college$Accept)
hist(college$Apps,college$Accept,breaks=1000)
hist(college$Apps,college$Accept,breaks=10)
hist(college$Apps,college$Accept,breaks=2)
?hist
hist(college$Apps,college$Accept,breaks=1000)
par(mfrow=c(1,1))
hist(college$Apps,college$Accept,breaks=1000)
plot(college$Apps,college$Accept)
str(college)
hist(college$Grad.Rate)
plot(college$Elite,college$Grad.Rate)
summary(college$Grad.Rate)
plot(college$Apps,college$Accept)
plot(college$Accept,college$Enroll)
plot(college$Elite,(college$Room.Board)+(college$Books)+(college$Personal))
plot(college$Phd,college$Grad.Rate)
summary(colege$Phd)
summary(college$Phd)
plot(college$PhD,college$Grad.Rate)
plot(college$Terminal,college$Grad.Rate)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt")
str(auto)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings=?)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings="?")
str(auto)
range(mpg)
summary(auto)
range(weight)
mean(mpg)
sd(mpg)
sd(mpg[-10:85,])
sd(auto$mpg[-10:85,])
sd(auto$mpg[-(10:85),])
auto$mpg[10]
auto$mpg[-10:50]
auto$mpg[-10:50,]
savehistory()
auto$mpg[c(1:10,86:397),]
auto$mpg[c(1:10),]
auto$mpg[(1:10),]
auto$mpg[1:10,]
auto$mpg(1:10,)
auto$mpg[10,]
auto$mpg[(1:10)]
auto$mpg[-(10:85)]
auto$mpg[10]
summary(auto)
str(auto)
plot(mpg,cylinders)
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(origin,mpg)
Boston
library(Mass)
library(MASS)
Boston
str(Boston)
?Boston
load(Boston)
fix(Boston)
pair(Boston$black,Boston$crim)
pairs(Boston$black,Boston$crim)
pairs(~Boston$black + Boston$crim)
summary(crim)
summary(Boston$crim)
summary(Boston$black)
savehistory()
str(Boston)
library(MASS)
str(Boston)
pairs(Boston)
?Boston
Boston[1,]
plot(Boston$zn,Boston$crim)
Boston[zn=0]
Boston(zn=0)
Boston[zn=0,]
Boston[Boston$zn=0,]
Boston[Boston$zn==0,]
str(Boston)
plot(Boston$zn,Boston$ptratio)
pairs(Boston$zn,Boston$crim)
pairs(~Boston$zn,Boston$crim)
pairs(~Boston$zn+Boston$crim)
pairs(~Boston$zn+Boston$ptratio)
pairs(~Boston$zn+Boston$tax)
pairs(~Boston$zn+Boston$chas)
savehistory()
quit
quit()
library(MASS)
str(Boston)
a=c[1,2,3,4]
a=c(1,2,3,4)
median(a)
med(Boston$ptratio)
median(Boston$ptratio)
summary(Boston$ptratio)
?Boston
summary(Boston$medv)
Boston[Boston$medv=min(Boston$medv)]
Boston[Boston$medv=min(Boston$medv),]
Boston[Boston$medv==min(Boston$medv),]
summary(Boston$lstat)
summary(Boston$black)
summary(Boston$tax)
summary(Boston$crim)
mean(a)
a=c(1,2,3,8,7)
mean(a)
median(a)
a=c(1,2,3,8,7,9)
mean(a)
median(a)
Boston[Boston$rm>7,]
count(Boston[Boston$rm>7,])
cnt(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>8,])
(Boston[Boston$rm>8,])
summary(Boston$crim)
savehistory()
summary(Boston$crim)
library(MASS)
library(ISLR)
install.packages("ISLR")
?Boston
fix(Boston)
fix(Boston)
?fix
names(Boston)
?Boston
lm.fit=lm(med~lstat)
lm.fit=lm(med~lstat,data=Boston)
lm.fit=lm(medv~lstat,data=Boston)
lm.fit
summary(lm.fit)
lm.fit$coefficients
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
?Boston
Boston$lstat[1,1]
Boston$lstat[1]
predict(lm.fit,data.frame(lstat=c(5,10,15))),interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))),interval="confidence")
summary(boston?medv)
summary(Boston?medv)
summary(Boston$medv)
summary(Boston$lstat)
install.packages("ISLR")
plot(Boston$medv,Boston$lstat)
?Boston
plot(Boston$lstat,Boston$medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(Boston$lstat,Boston$medv,col="red")
plot(Boston$lstat,Boston$medv,pch=20)
plot(Boston$lstat,Boston$medv,pch="+")
plot(Boston$lstat,Boston$medv,pch="*")
plot(Boston$lstat,Boston$medv,pch="R")
plot(Boston$lstat,Boston$medv,pch="/")
plot (1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),restudent(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(plot(hatvalues(lm.fit)))
which.max(hatvalues(lm.fit))
21126909
8663166526
savehistory()
exit
quit
quit
quit()
library(MASS)
quit()
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
library(XML)
etf.table= readHTMLTable(etf)
etf.table
str(etf.table)
etf = "finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
u = "http://en.wikipedia.org/wiki/List_of_countries_by_population"
tables = readHTMLTable(u)
tables
names(tables)
tables[[2]]
tmp = tables[[2]]
tmp
airline = "http://www.theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
airline.table = readHTMLTable(airline, header=T, which=1,stringsAsFactors=F)
View(airline.table)
airline.table = readHTMLTable(airline)
etf.table= readHTMLTable(etf,header=T,which=1,stringsAsFactors=F)
etf
tables = readHTMLTable(u,stringsAsFactors=F)
tables
etf.table= readHTMLTable(etf,stringsAsFactors=F)
etf.table
etf.table= readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etf.table)
etf.table= readHTMLTable(etf,which=2,stringsAsFactors=F)
View(etf.table)
etf.table
install.packages("RCurl")
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
library("zoo")
library("fPortfolio")
library("PerformanceAnalytics")
?maxreturnPortfolio
??maxreturnPortfolio
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/Analytics/R-code/portfolio_optimization_prediction/CG_CVAR_portman.R')
quit()
quit()
library(ggplot)
setwd("D:/Analytics/Analytics_edge/Visualization/who")
WHO = read.csv("WHO.csv", header = TRUE)
str(WHO)
plot(WHO$GNI ~ WHO$FertilityRate)
install.packages("ggplot2")
library(ggplot2)
scatterplot = ggplot(WHO , aes(a = GNI , y = FertilityRate))
scatterplot + geom_point()
scatterplot = ggplot(WHO , aes(x = GNI , y = FertilityRate))
scatterplot + geom_point()
scatterplot + geom_line()
scatterplot + geom_point()
scatterplot + geom_point(color = "blue" , size=3, shape=17)
scatterplot + geom_point(color = "darkred" , size=3, shape=8)
scatterplot + geom_point(color = "darkred" , size=3, shape=8) + ggtitle("Fertility Rate Vs Gross National Income")
scatterplot + geom_point(color = "darkred" , size=3, shape=8) + ggtitle("Fertility Rate Vs Gross National Income")
fertilityGNIplot = scatterplot + geom_point(color = "darkred" , size=3, shape=8) + ggtitle("Fertility Rate Vs Gross National Income")
pdf("myplot.pdf")
print(fertilityGNIplot)
dev.off()
scatterplot + geom_point(color = "darkred" , size=3, shape=15)
ggplot(WHO , aes(x=GNI , y = FertilityRate, color=Region)) + geom_point()
str(WHO)
ggplot(WHO , aes(x=GNI , y = FertilityRate, color=LifeExpectancy)) + geom_point()
ggplot(WHO , aes(x=FertilityRate , y = Under15)) + geom_point()
ggplot(WHO , aes(x=log(FertilityRate) , y = Under15)) + geom_point()
model = lm(Under15 ~ log(FertilityRate) , data=WHO)
summary(model)
ggplot(WHO , aes(x=log(FertilityRate) , y = Under15)) + geom_point() + stat_smooth(method="lm")
ggplot(WHO , aes(x=log(FertilityRate) , y = Under15)) + geom_point() + stat_smooth(method="lm", level = 0.99)
ggplot(WHO , aes(x=log(FertilityRate) , y = Under15)) + geom_point() + stat_smooth(method="lm", SE=F)
ggplot(WHO , aes(x=log(FertilityRate) , y = Under15)) + geom_point() + stat_smooth(method="lm", se=F)
ggplot(WHO , aes(x=log(FertilityRate) , y = Under15)) + geom_point() + stat_smooth(method="lm", se=F , color="orange")
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15 , color=Region)) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15 , color=Region)) + geom_point() + scale_color_brewer(palette="Dark2")
ggplot(WHO, aes(x = FertilityRate, y = Under15 , color=Region)) + geom_point()
rm(list=ls())
library(ggplot2)
setwd("D:/Analytics/Analytics_edge/Visualization/motorvehicletheft")
mvt = read.csv("mvt.csv", header = TRUE)
str(mvt)
mvt = read.csv("mvt.csv", header = TRUE , stringsAsFactors = F)
str(mvt)
mvt$Date = strptime(mvt$Date , format = "%m/%d/%y %H:%M")
str(mvt)
mvt$Weekday = weekdays(mvt$Date)
mvt$Hour = mvt$Date$hour
str(mvt)
table(mvt$Weekday)
WeekdayCounts = as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
ggplot(WeekdayCounts , aes(x=var1 , y=Freq)) + geom_line(aes(group=1))
ggplot(WeekdayCounts , aes(x=Var1 , y=Freq)) + geom_line(aes(group=1))
ggplot(WeekdayCounts , aes(x=Var1 , y=Freq)) + geom_line()
y
ggplot(WeekdayCounts , aes(x=Var1 , y=Freq)) + geom_line(aes(group=2))
ggplot(WeekdayCounts , aes(x=Var1 , y=Freq)) + geom_line(aes(group=5))
ggplot(WeekdayCounts , aes(x=Var1 , y=Freq)) + geom_line(aes(group=1))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1,ordered=T , levels = c("Sunday", "Monday","Tuesday","Wednesday","Thursday", "Friday","Saturday"))
ggplot(WeekdayCounts , aes(x=Var1 , y=Freq)) + geom_line(aes(group=1))
ggplot(WeekdayCounts , aes(x=Var1 , y=Freq)) + geom_line(aes(group=1)) + xlab("Day of the week") + ylab ("Total motor vehicle thefts")
ggplot(WeekdayCounts , aes(x=Var1 , y=Freq)) + geom_line(aes(group=1), linetype=2)
ggplot(WeekdayCounts , aes(x=Var1 , y=Freq)) + geom_line(aes(group=1), alpha=0.3)
ggplot(WeekdayCounts , aes(x=Var1 , y=Freq)) + geom_line(aes(group=1))
table(mvt$Weeekday , mvt$Hour)
table(mvt$Hour)
table(mvt$Weekday,mvt$Hour)
dayhourcounts = as.data.frame(table(mvt$Weekday,mvt$Hour))
str(dayhourcounts)
dayhourcounts$Hour = as.numeric(as.character(dayhourcounts$Var2))
str(dayhourcounts)
ggplot(dayhourcounts , aes(x = Hour , y = Freq)) + geom_line(aes(group=Var1))
ggplot(dayhourcounts , aes(x = Hour , y = Freq)) + geom_line(aes(group=Var1 , color=Var1 , size=2))
ggplot(dayhourcounts , aes(x = Hour , y = Freq)) + geom_line(aes(group=Var1 , color=Var1 , size=2))
dayhourcounts$Var1 = factor(dayhourcounts$Var1,ordered=T , levels = c("Sunday", "Monday","Tuesday","Wednesday","Thursday", "Friday","Saturday"))
dayhourcounts$Var1 = factor(dayhourcounts$Var1,ordered=T , levels = c("Monday","Tuesday","Wednesday","Thursday", "Friday","Saturday","Sunday"))
ggplot(dayhourcounts , aes(x = Hour , y = Var1)) + geom_tile(aes(fill=Freq)))
ggplot(dayhourcounts , aes(x = Hour , y = Var1)) + geom_tile(aes(fill=Freq))
ggplot(dayhourcounts , aes(x = Hour , y = Var1)) + geom_tile(aes(fill=Freq)) + scale_fill_gradient(name="Total MV Theft") + theme(axis.title.y=element_blank())
ggplot(dayhourcounts , aes(x = Hour , y = Var1)) + geom_tile(aes(fill=Freq)) + scale_fill_gradient(name="Total MV Theft", low="white" , high="red") + theme(axis.title.y=element_blank())
install.packages("maps","ggmaps")
install.packages("maps")
install.packages("ggmap")
library(maps)
library(ggmap)
chicago = get_map(location="chicago" , zoom=11)
ggmap(chicago)
pune = get_map(location="pune" , zoom=11)
ggmap(pune)
str(mvt)
ggmap(chicago) + geom_point(data=mvt[1:100,],aes(x=Longitude , y=Latitude))
latloncounts = as.data.frame(table(round(mvt$Longitude,2) , round(mvt$Latitude,2)))
str(latloncounts)
table(round(mvt$Longitude,2) , round(mvt$Latitude,2)
)
latloncounts$lon = as.numeric(as.char(latloncounts$Var1))
latloncounts$lon = as.numeric(as.character(latloncounts$Var1))
latloncounts$lat = as.numeric(as.character(latloncounts$Var2))
ggmap(chicago) + geom_point(data=latloncounts, aes(x=lon , y=lat , color=Freq , size=Freq))
ggmap(chicago) + geom_point(data=latloncounts, aes(x=lon , y=lat , color=Freq , size=Freq)) + scale_color_gradient(low="yellow" , high="red")
ggmap(chicago) + geom_tile(data=latloncounts, aes(x=lon , y=lat , alpha=Freq), fill="red")
latloncounts2 = subset(latloncounts , latloncounts$Freq > 0)
str(latloncounts2)
str(latloncounts)
1638-686
ggmap(chicago) + geom_tile(data=latloncounts2, aes(x=lon , y=lat , alpha=Freq), fill="red")
## murders
rm(list=ls())
library(ggplot2)
library(maps)
library(ggmap)
setwd("D:/Analytics/Analytics_edge/Visualization/murders")
mvt = read.csv("murders.csv", header = TRUE , stringsAsFactors = F)
str(murders)
murders = read.csv("murders.csv", header = TRUE , stringsAsFactors = F)
str(murders)
statesmap = map_data("states")
statesmap = map_data("state")
str(statesmap)
ggplt(statesmap,aes(x=long , y = lat , group = group)) + geom_polygon(fill="white", color="black")
ggplot(statesmap,aes(x=long , y = lat , group = group)) + geom_polygon(fill="white", color="black")
murders$region = tolower(murders$State)
str(murders)
murdermap = merge(statesmap , murders , by="region")
str(murdersmap)
str(murdermap)
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murders)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend")
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=Murders)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend")
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=Population)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend")
murdermap$murderrate = murdermap$Murders/(murdermap$Population*1000)
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend")
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limits=(0,10))
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limits=c(0,10))
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limit=c(0,10))
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend")
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limits=c(0,10))
murdermap$murderrate = (murdermap$Murders/(murdermap$Population*1000))
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend")
## removing washington DC , murderrate > 10
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limits=c(0,10))
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limits=c(0,1))
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limits=c(0,0))
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limits=c(0,2))
str(murdermap)
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=GunOwnership)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limits=c(0,10))
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=GunOwnership)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" )
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,10))
ggplot(murdermap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,10))
ggplot(murdermap, aes(x = long, y = lat, group = group, fill = Murderrate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,10))
ggplot(murdermap, aes(x = long, y = lat, group = group, fill = murderrate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,10))
source('D:/Analytics/Analytics_edge/Visualization/murders/Unit7_Crime.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# VIDEO 5 - Maps
# Install and load two new packages:
install.packages("maps")
install.packages("ggmap")
library(maps)
library(ggmap)
# Load a map of Chicago into R:
chicago = get_map(location = "chicago", zoom = 11)
# Look at the map
ggmap(chicago)
# Plot the first 100 motor vehicle thefts:
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
# Round our latitude and longitude to 2 digits of accuracy, and create a crime counts data frame for each area:
LatLonCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
str(LatLonCounts)
# Convert our Longitude and Latitude variable to numbers:
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
# Plot these points on our map:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))
# Change the color scheme:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq)) + scale_colour_gradient(low="yellow", high="red")
# We can also use the geom_tile geometry
ggmap(chicago) + geom_tile(data = LatLonCounts, aes(x = Long, y = Lat, alpha = Freq), fill="red")
# VIDEO 6 - Geographical Map on US
# Load our data:
murders = read.csv("murders.csv")
str(murders)
# Load the map of the US
statesMap = map_data("state")
str(statesMap)
# Plot the map:
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
# Create a new variable called region with the lowercase names to match the statesMap:
murders$region = tolower(murders$State)
# Join the statesMap data and the murders data into one dataframe:
murderMap = merge(statesMap, murders, by="region")
str(murderMap)
# Plot the number of murder on our map of the United States:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Murders)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Plot a map of the population:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Population)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Create a new variable that is the number of murders per 100,000 population:
murderMap$MurderRate = murderMap$Murders / murderMap$Population * 100000
# Redo our plot with murder rate:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Redo the plot, removing any states with murder rates above 10:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,10))
install.packages("maps")
install.packages("ggmap")
install.packages("ggmap")
murdermap$murderrate = (murdermap$Murders/(murdermap$Population*100000))
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend")
## removing washington DC , murderrate > 10 , need to check LIMITS as it is not working properly
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limits=c(0,10))
## replacing the fill variable with gunownership
murdermap$murderrate = (murdermap$Murders/(murdermap$Population*100000))
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend")
ggplot(murdermap , aes(x=long , y = lat , group = group, fill=murderrate)) + geom_polygon(color="black") + scale_fill_gradient(low="black",high="red", guide = "legend" , limits=c(0,10))
quit()
