college[2,1]
college=read.csv("D:/Analytics/Statistical_learning/Data/college.csv")
college[2,1]
str(college)
college[1,]
rownames(college)
rownames(college)=college[,1]
college[1,]
fix(college)
college=college[,-1]
fix(college)
fix(college)
summary(college)
?pairs
pairs(college[,1:10])
pairs(college[,1:2])
pairs(college[,1:1])
pairs(college[,1])
?boxplot
?plot
plot(college$private,college$outstate)
plot(factor(college$private),college$outstate)
pripub=factor(college$private)
str(pripub)
pripub=as.factor(college$private)
str(pripub)
pripub=as.factor(college$Private)
plot(as.factor(college$Private),college$Outstate)
plot(as.factor(college$Private),college$Outstate,xlab="Private",ylab="Outstate", main="Provate VS Outstate")
plot(as.factor(college$Private),college$Outstate,xlab="Private",ylab="Outstate", main="Private VS Outstate")
Elite=rep("No",nrow(college))
str(Elite)
Elite[college$Top10perc>50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
fix(college)
str(Elite)
summary(college)
plot(as.factor(college$Elite),college$Outstate,xlab="Elite",ylab="Outstate", main="Elite VS Outstate")
?hist
par(mfrow=c(2,2))
plot(as.factor(college$Elite),college$Outstate,xlab="Elite",ylab="Outstate", main="Elite VS Outstate")
hist(college$apps,college$accept)
hist(college$Apps,college$Accept)
hist(college$Apps,college$Accept,breaks=1000)
hist(college$Apps,college$Accept,breaks=10)
hist(college$Apps,college$Accept,breaks=2)
?hist
hist(college$Apps,college$Accept,breaks=1000)
par(mfrow=c(1,1))
hist(college$Apps,college$Accept,breaks=1000)
plot(college$Apps,college$Accept)
str(college)
hist(college$Grad.Rate)
plot(college$Elite,college$Grad.Rate)
summary(college$Grad.Rate)
plot(college$Apps,college$Accept)
plot(college$Accept,college$Enroll)
plot(college$Elite,(college$Room.Board)+(college$Books)+(college$Personal))
plot(college$Phd,college$Grad.Rate)
summary(colege$Phd)
summary(college$Phd)
plot(college$PhD,college$Grad.Rate)
plot(college$Terminal,college$Grad.Rate)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt")
str(auto)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings=?)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings="?")
str(auto)
range(mpg)
summary(auto)
range(weight)
mean(mpg)
sd(mpg)
sd(mpg[-10:85,])
sd(auto$mpg[-10:85,])
sd(auto$mpg[-(10:85),])
auto$mpg[10]
auto$mpg[-10:50]
auto$mpg[-10:50,]
savehistory()
auto$mpg[c(1:10,86:397),]
auto$mpg[c(1:10),]
auto$mpg[(1:10),]
auto$mpg[1:10,]
auto$mpg(1:10,)
auto$mpg[10,]
auto$mpg[(1:10)]
auto$mpg[-(10:85)]
auto$mpg[10]
summary(auto)
str(auto)
plot(mpg,cylinders)
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(origin,mpg)
Boston
library(Mass)
library(MASS)
Boston
str(Boston)
?Boston
load(Boston)
fix(Boston)
pair(Boston$black,Boston$crim)
pairs(Boston$black,Boston$crim)
pairs(~Boston$black + Boston$crim)
summary(crim)
summary(Boston$crim)
summary(Boston$black)
savehistory()
str(Boston)
library(MASS)
str(Boston)
pairs(Boston)
?Boston
Boston[1,]
plot(Boston$zn,Boston$crim)
Boston[zn=0]
Boston(zn=0)
Boston[zn=0,]
Boston[Boston$zn=0,]
Boston[Boston$zn==0,]
str(Boston)
plot(Boston$zn,Boston$ptratio)
pairs(Boston$zn,Boston$crim)
pairs(~Boston$zn,Boston$crim)
pairs(~Boston$zn+Boston$crim)
pairs(~Boston$zn+Boston$ptratio)
pairs(~Boston$zn+Boston$tax)
pairs(~Boston$zn+Boston$chas)
savehistory()
quit
quit()
library(MASS)
str(Boston)
a=c[1,2,3,4]
a=c(1,2,3,4)
median(a)
med(Boston$ptratio)
median(Boston$ptratio)
summary(Boston$ptratio)
?Boston
summary(Boston$medv)
Boston[Boston$medv=min(Boston$medv)]
Boston[Boston$medv=min(Boston$medv),]
Boston[Boston$medv==min(Boston$medv),]
summary(Boston$lstat)
summary(Boston$black)
summary(Boston$tax)
summary(Boston$crim)
mean(a)
a=c(1,2,3,8,7)
mean(a)
median(a)
a=c(1,2,3,8,7,9)
mean(a)
median(a)
Boston[Boston$rm>7,]
count(Boston[Boston$rm>7,])
cnt(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>8,])
(Boston[Boston$rm>8,])
summary(Boston$crim)
savehistory()
summary(Boston$crim)
library(MASS)
library(ISLR)
install.packages("ISLR")
?Boston
fix(Boston)
fix(Boston)
?fix
names(Boston)
?Boston
lm.fit=lm(med~lstat)
lm.fit=lm(med~lstat,data=Boston)
lm.fit=lm(medv~lstat,data=Boston)
lm.fit
summary(lm.fit)
lm.fit$coefficients
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
?Boston
Boston$lstat[1,1]
Boston$lstat[1]
predict(lm.fit,data.frame(lstat=c(5,10,15))),interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))),interval="confidence")
summary(boston?medv)
summary(Boston?medv)
summary(Boston$medv)
summary(Boston$lstat)
install.packages("ISLR")
plot(Boston$medv,Boston$lstat)
?Boston
plot(Boston$lstat,Boston$medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(Boston$lstat,Boston$medv,col="red")
plot(Boston$lstat,Boston$medv,pch=20)
plot(Boston$lstat,Boston$medv,pch="+")
plot(Boston$lstat,Boston$medv,pch="*")
plot(Boston$lstat,Boston$medv,pch="R")
plot(Boston$lstat,Boston$medv,pch="/")
plot (1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),restudent(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(plot(hatvalues(lm.fit)))
which.max(hatvalues(lm.fit))
21126909
8663166526
savehistory()
exit
quit
quit
quit()
library(MASS)
quit()
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
library(XML)
etf.table= readHTMLTable(etf)
etf.table
str(etf.table)
etf = "finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
u = "http://en.wikipedia.org/wiki/List_of_countries_by_population"
tables = readHTMLTable(u)
tables
names(tables)
tables[[2]]
tmp = tables[[2]]
tmp
airline = "http://www.theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
airline.table = readHTMLTable(airline, header=T, which=1,stringsAsFactors=F)
View(airline.table)
airline.table = readHTMLTable(airline)
etf.table= readHTMLTable(etf,header=T,which=1,stringsAsFactors=F)
etf
tables = readHTMLTable(u,stringsAsFactors=F)
tables
etf.table= readHTMLTable(etf,stringsAsFactors=F)
etf.table
etf.table= readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etf.table)
etf.table= readHTMLTable(etf,which=2,stringsAsFactors=F)
View(etf.table)
etf.table
install.packages("RCurl")
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
library("zoo")
library("fPortfolio")
library("PerformanceAnalytics")
?maxreturnPortfolio
??maxreturnPortfolio
source('D:/Analytics/R-code/portfolio_optimization_prediction/CG_CVAR_portman.R')
source('D:/Analytics/R-code/portfolio_optimization_prediction/CG_CVAR_portman.R')
source('D:/Analytics/R-code/portfolio_optimization_prediction/CG_CVAR_portman.R')
source('D:/Analytics/R-code/portfolio_optimization_prediction/CG_CVAR_portman.R')
## Loan Repayment
library("caTools")
##library("ROCR")
library("mice")
setwd("D:/Analytics/Analytics_edge/Logistic_Regression/loans")
loans = read.csv("loans.csv")
str(loans)
summary(loans)
## What proportion of the loans in the dataset were not paid in full? Please input a number between 0 and 1.
table(loans$not.fully.paid)
## populating missing data
missing = subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) |
is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
summary(loans)
## splitting the dataset into Train and Test
split = sample.split(loans$not.fully.paid,SplitRatio=0.7)
train = subset(loans,split==T)
test = subset(loans,split==F)
str(train)
str(test)
# training the logistic model
logm = glm(not.fully.paid ~ .,data=train,family=binomial)
summary(logm)
logit_diff = (-7.983e-03 * 700) - (-7.983e-03 * 710)
logit_diff
logit_diff = (7.486e+00 + (-7.983e-03 * 700)) - (7.486e+00 + (-7.983e-03 * 710))
logit_diff
-7.983e-03 * 700
-7.983e-03 * 710
5.66793 - 5.5881
predicted.risk = predict(logm, new_data=test, type="response")
test$predicted.risk=predicted.risk
str(test)
str(predicted.risk)
table(test$not.fully.paid , predicted.risk > 0.5)
logm = glm(not.fully.paid ~ .,data=train,family=binomial)
summary(logm)
predicted.risk = predict(logm, newdata=test, type="response")
test$predicted.risk = predicted.risk
table(test$not.fully.paid , predicted.risk > 0.5)
(2406 + 21)/(2406+21+7+439)
2413/(2413+439+21)
ROCRpred = prediction (predicted.risk , test$not.fully.paid)
library("ROCR")
ROCRpred = prediction (predicted.risk , test$not.fully.paid)
auc = as.numeric(performance(ROCRpred, "auc")@y.values) ## 0.7421095
auc
logm_intrate = glm(not.fully.paid ~ int.rate , data=train , family=binomial)
summary(logm_intrate)
predtest_intrate = predict(logm_intrate,newdata=test,type="response")
max(predtest_intrate)
summary(predtest_intrate) ##0.4413187
max(predtest_intrate[which(test$not.fully.paid == 1)])
predtest_intrate[which(test$not.fully.paid == 1)]
sort(predtest_intrate[which(test$not.fully.paid == 1)])
summary(predtest_intrate) ##0.4413187
ROCRpred = prediction (predtest_intrate , test$not.fully.paid)
auc = as.numeric(performance(ROCRpred, "auc")@y.values) ## 0.6744725
auc
str(test)
predtest_intrate = predict(logm_intrate,newdata=test,type="response")
ROCRpred = prediction (predtest_intrate , test$not.fully.paid)
auc = as.numeric(performance(ROCRpred, "auc")@y.values) ## 0.6136025
auc
logm_intrate = glm(not.fully.paid ~ int.rate , data=train , family=binomial)
predtest_intrate = predict(logm_intrate,newdata=test,type="response")
summary(predtest_intrate) ##0.4413187
10*exp(0.06*3)
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
max(test$profit)
highinterest = subset(test, int.rate >= 15)
mean(highinterest$profit)
summary(highinterest)
highinterest = subset(test, int.rate >= 0.15)
summary(highinterest)
mean(highinterest$profit)
table(highinterest$not.fully.paid)
95/(311+95)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
sort(highInterest$predicted.risk, decreasing=FALSE)
cutoff = sort(highinterest$predicted.risk, decreasing=FALSE)[100]
cutoff
summary(tan.etl)
summary(eff.med.etl)
## efficient portfolio for medium risk
setSolver(spec) ="solveRshortExact"
setTargetRisk(spec) = 0.01
eff.med.etl = maxreturnPortfolio(data=cat.ret.ts, spec = spec, constraints = constraints)
summary(eff.med.etl)
summary(cat.ret.ts)
names(cat.ret.ts)
unique(ret.mat)
unique(ret.mat$cat)
unique(cat.mat$cat)
unique(etf_return.table$cat)
names(cat_ret.ts)
class(cat.ret.ts)
colnames(cat.ret.ts)
colnames(cat.ret.ts) = c("Allocation Funds","Alternative Funds","Commodities","International Equity Funds","Municipal Bond Funds","Sector Equity Funds","Taxable Bond Funds","U.S. Equity Fund")
## efficient portfolio for medium risk
setSolver(spec) ="solveRshortExact"
setTargetRisk(spec) = 0.01
eff.med.etl = maxreturnPortfolio(data=cat.ret.ts, spec = spec, constraints = constraints)
colnames(cat.ret.ts)
summary(eff.med_etl)
summary(eff.med.etl)
weightsPie(eff.med.etl,col=rainbow )
weightsPie(eff.med.etl,col=c("yellow","blue","black","red","orange","pink","grey","green") )
summary(eff.med.etl)
constraints = "minW[]=0.01"
eff.med.etl = maxreturnPortfolio(data=cat.ret.ts, spec = spec, constraints = constraints)
summary(eff.med.etl)
setTargetRisk(spec) = 0.005
eff.med.etl = maxreturnPortfolio(data=cat.ret.ts, spec = spec, constraints = constraints)
summary(eff.med.etl)
summary(tan.etl)
getWeights(maxreturnPortfolio(cat.ret.ts, Spec, Constraints)@portfolio)
getWeights(maxreturnPortfolio(cat.ret.ts, Spec=spec, Constraints)@portfolio)
getWeights(maxreturnPortfolio(cat.ret.ts, spec, Constraints)@portfolio)
getWeights(maxreturnPortfolio(cat.ret.ts, spec, constraints)@portfolio)
contraints
constraints
constraints= "LongOnly"
getWeights(maxreturnPortfolio(cat.ret.ts, spec, constraints)@portfolio)
eff.med.etl = maxreturnPortfolio(data=cat.ret.ts, spec = spec, constraints = "minW[]=0.01")
summary(eff.med.etl)
setTargetRisk(spec) = 0.0028
summary(eff.med.etl)
getWeights(maxreturnPortfolio(cat.ret.ts, spec, constraints="LongOnly")@portfolio)
summary(tan.etl)
selectedloans = subset(highinterest ,  predicted.risk <= cutoff)
sum(selectedloans$profit)
summary(selectedLoans)
summary(SelectedLoans)
summary(selectedloans)
length(selectedloans$not.fully.paid == 1)
str(selectedloans)
length(which(selectedloans$not.fully.paid == 1))
table(selectedloans$not.fully.paid)
table(selectedloans$profit)
cutoff = sort(highinterest$predicted.risk, decreasing=FALSE)[100]
selectedloans = subset(highinterest ,  predicted.risk < cutoff)
sum(selectedloans$profit)
table(selectedloans$profit)
table(selectedloans$not.fully.paid)
cutoff = sort(highinterest$predicted.risk, decreasing=FALSE)[100]
selectedloans = subset(highinterest ,  predicted.risk <= cutoff)
sum(selectedloans$profit)
table(selectedloans$not.fully.paid)
logm = glm(not.fully.paid ~ .,data=train,family=binomial)
summary(logm)
setwd("D:/Analytics/Analytics_edge/Logistic_Regression/baseball")
baseball = read.csv("baseball.csv")
str(baseball)
summary(baseball)
table(baseball$Year)
baseball = subset(baseball , Playoffs == 1)
str(baseball)
table(baseball$Year),
table(baseball$Year)
PlayoffTable = table(baseball$Year)
PlayoffTable
str(PlayoffTable)
summary(PlayoffTable)
names(PlayoffTable)
PlayoffTable[1990,2001]
PlayoffTable["1990","2001"]
PlayoffTable("1990","2001")
PlayoffTable[c("1990","2001")]
PlayoffTable[as.character(baseball$Year)]
baseball$NumCompetitors = PlayoffTable[as.character(baseball$Year)]
table(baseball$NumCompetitors >=8)
table(baseball$NumCompetitors ==8)
baseball$WorldSeries = as.numeric(baseball$RankPlayoffs == 1)
table(baseball$WorldSeries != 1)
logm_bi = glm(RankPlayoffs ~ RS, data=baseball , family=binomial)
logm_bi = glm(WorldSeries ~ RS, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ RA, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ W, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ OBP, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ SLG, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ BA, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ RankSeason, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ OOBP, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ OSLG, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ NumCompetitors, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ League, data=baseball , family=binomial)
summary(logm_bi)
logm_bi = glm(WorldSeries ~ Year, data=baseball , family=binomial)
summary(logm_bi)
logm = glm(WorldSeries ~ Year + RA + RankSeason + NumCompetitors, data=baseball , family=binomial)
summary(logm)
cor(baseball["Year","RA","RankSeason","NumCompetitors"])
baseball["Year","RA","RankSeason","NumCompetitors"]
baseball["Year"]
cor(baseball[c("Year","RA","RankSeason","NumCompetitors")])
logm1 = glm(WorldSeries ~ Year , data=baseball , family=binomial)
summary(logm1) ## AIC=
logm2 = glm(WorldSeries ~ RA , data=baseball , family=binomial)
summary(logm2) ## AIC=232.35
logm3 = glm(WorldSeries ~ RankSeason , data=baseball , family=binomial)
summary(logm3) ## AIC=232.35
logm4 = glm(WorldSeries ~ NumCompetitors , data=baseball , family=binomial)
summary(logm4) ## AIC=232.35
logm5 = glm(WorldSeries ~ Year + RA , data=baseball , family=binomial)
summary(logm5) ## AIC=232.35
logm6 = glm(WorldSeries ~ Year + RankSeason , data=baseball , family=binomial)
summary(logm6) ## AIC=232.35
logm7 = glm(WorldSeries ~ Year + NumCompetitors , data=baseball , family=binomial)
summary(logm7) ## AIC=232.35
logm8 = glm(WorldSeries ~ RA + RankSeason , data=baseball , family=binomial)
summary(logm8) ## AIC=232.35
logm9 = glm(WorldSeries ~ RA + NumCompetitors , data=baseball , family=binomial)
summary(logm9) ## AIC=232.35
logm10 = glm(WorldSeries ~ RankSeason + NumCompetitors , data=baseball , family=binomial)
summary(logm10) ## AIC=232.35
quit()
