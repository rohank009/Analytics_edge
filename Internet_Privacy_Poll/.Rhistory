Boston(zn=0)
Boston[zn=0,]
Boston[Boston$zn=0,]
Boston[Boston$zn==0,]
str(Boston)
plot(Boston$zn,Boston$ptratio)
pairs(Boston$zn,Boston$crim)
pairs(~Boston$zn,Boston$crim)
pairs(~Boston$zn+Boston$crim)
pairs(~Boston$zn+Boston$ptratio)
pairs(~Boston$zn+Boston$tax)
pairs(~Boston$zn+Boston$chas)
savehistory()
quit
quit()
library(MASS)
str(Boston)
a=c[1,2,3,4]
a=c(1,2,3,4)
median(a)
med(Boston$ptratio)
median(Boston$ptratio)
summary(Boston$ptratio)
?Boston
summary(Boston$medv)
Boston[Boston$medv=min(Boston$medv)]
Boston[Boston$medv=min(Boston$medv),]
Boston[Boston$medv==min(Boston$medv),]
summary(Boston$lstat)
summary(Boston$black)
summary(Boston$tax)
summary(Boston$crim)
mean(a)
a=c(1,2,3,8,7)
mean(a)
median(a)
a=c(1,2,3,8,7,9)
mean(a)
median(a)
Boston[Boston$rm>7,]
count(Boston[Boston$rm>7,])
cnt(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>8,])
(Boston[Boston$rm>8,])
summary(Boston$crim)
savehistory()
summary(Boston$crim)
library(MASS)
library(ISLR)
install.packages("ISLR")
?Boston
fix(Boston)
fix(Boston)
?fix
names(Boston)
?Boston
lm.fit=lm(med~lstat)
lm.fit=lm(med~lstat,data=Boston)
lm.fit=lm(medv~lstat,data=Boston)
lm.fit
summary(lm.fit)
lm.fit$coefficients
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
?Boston
Boston$lstat[1,1]
Boston$lstat[1]
predict(lm.fit,data.frame(lstat=c(5,10,15))),interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))),interval="confidence")
summary(boston?medv)
summary(Boston?medv)
summary(Boston$medv)
summary(Boston$lstat)
install.packages("ISLR")
plot(Boston$medv,Boston$lstat)
?Boston
plot(Boston$lstat,Boston$medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(Boston$lstat,Boston$medv,col="red")
plot(Boston$lstat,Boston$medv,pch=20)
plot(Boston$lstat,Boston$medv,pch="+")
plot(Boston$lstat,Boston$medv,pch="*")
plot(Boston$lstat,Boston$medv,pch="R")
plot(Boston$lstat,Boston$medv,pch="/")
plot (1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),restudent(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(plot(hatvalues(lm.fit)))
which.max(hatvalues(lm.fit))
21126909
8663166526
savehistory()
exit
quit
quit
quit()
library(MASS)
quit()
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
library(XML)
etf.table= readHTMLTable(etf)
etf.table
str(etf.table)
etf = "finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
u = "http://en.wikipedia.org/wiki/List_of_countries_by_population"
tables = readHTMLTable(u)
tables
names(tables)
tables[[2]]
tmp = tables[[2]]
tmp
airline = "http://www.theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
airline.table = readHTMLTable(airline, header=T, which=1,stringsAsFactors=F)
View(airline.table)
airline.table = readHTMLTable(airline)
etf.table= readHTMLTable(etf,header=T,which=1,stringsAsFactors=F)
etf
tables = readHTMLTable(u,stringsAsFactors=F)
tables
etf.table= readHTMLTable(etf,stringsAsFactors=F)
etf.table
etf.table= readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etf.table)
etf.table= readHTMLTable(etf,which=2,stringsAsFactors=F)
View(etf.table)
etf.table
install.packages("RCurl")
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
library("zoo")
library("fPortfolio")
library("PerformanceAnalytics")
rm(list=ls())
library("zoo")
library("fPortfolio")
library("PerformanceAnalytics")
library("XML")
library("stringr")
library("tseries")
setwd("D:/Analytics/R-code/portfolio_optimization_prediction")
buildQuoteMatrix = function( symbols, period, startDate, endDate)
{
for (i in 1:length(symbols))
{
sym = symbols[i]
print(sprintf("Reading symbol %s from yahoo", sym))
ts = get.hist.quote( sym, startDate, endDate, provider="yahoo", compression=period, quote="AdjClose", quiet=T)
if (i == 1) {
quote.mat = ts ## timeseries
} else {
quote.mat = cbind(quote.mat, ts)
}
}
colnames(quote.mat) = symbols
return( quote.mat)
} # buildQuoteMatrix
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
colnames(funds_return_raw.table)[1] = "Name" ## remove space from the colname
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
## Data cleansing
etf_return.table=unique(etf_return_raw.table)
etf_return.table=etf_return.table[,2:nc_etf] ## remove blank columns
etf_return.table=etf_return.table[-(which(is.na(etf_return.table[,1]))),] ## remove rows with NA value
colnames(etf_return.table)=etf_return.table[1,] ## set column names
etf_return.table=etf_return.table[-1,] ## remove first row having column names
colnames(etf_return.table)[2] = "SubCategory" ## renaming the column to sub-category
etf_return.table <- etf_return.table[order(etf_return.table$SubCategory), ] ## sorting by sub category
funds_return.table=unique(funds_return_raw.table[,1:2])
##colnames(funds_return.table) <- sub(" ", "", colnames(funds_return.table)) ## remove spaces from colnames
colnames(funds_return.table)[2] = "onemonth_perc"
## creating a dataframe for category and sub-category
category=data.frame(matrix(NA, nrow = nrow(funds_return.table), ncol = ncol(funds_return.table))) ## creating a dataframe
colnames(category)=c("cat","subcat") ## giving column names
for (i in 1:nrow(funds_return.table))
{
if ( is.na(funds_return.table$onemonth_perc[i]) )
{
categ=funds_return.table$Name[i]
subcateg = ""
}
else
{
subcateg=funds_return.table$Name[i]
}
if (length(subcateg) > 0)
{
category$cat[i]=categ
category$subcat[i]=subcateg
}
}
## Merging to get category column in the dataframe
etf_return.table=merge(etf_return.table,category,by.x="SubCategory", by.y="subcat", all.x=T)
View(etf_return.table)
etf_return.table=etf_return.table[-(which(etf_return.table$TradingVolume==0)),] ## remove all rows having tradingvolume=0
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="VLSM")),] ## remove VLSM
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="EMSA")),] ## remove EMSA
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="MFLA")),] ## remove MFLA
?str_locate
a=etf_return.table
b=gsub("\\(|\\)", "<>",a$Name[1])
b
a$Name[1]
a$Name
str(a)
a=etf_return.table
str(a)
View(etf_return.table)
etf_return.table=unique(etf_return_raw.table)
etf_return.table=etf_return.table[,2:nc_etf] ## remove blank columns
etf_return.table=etf_return.table[-(which(is.na(etf_return.table[,1]))),] ## remove rows with NA value
colnames(etf_return.table)=etf_return.table[1,] ## set column names
etf_return.table=etf_return.table[-1,] ## remove first row having column names
colnames(etf_return.table)[2] = "SubCategory" ## renaming the column to sub-category
etf_return.table <- etf_return.table[order(etf_return.table$SubCategory), ] ## sorting by sub category
funds_return.table=unique(funds_return_raw.table[,1:2])
##colnames(funds_return.table) <- sub(" ", "", colnames(funds_return.table)) ## remove spaces from colnames
colnames(funds_return.table)[2] = "onemonth_perc"
## creating a dataframe for category and sub-category
category=data.frame(matrix(NA, nrow = nrow(funds_return.table), ncol = ncol(funds_return.table))) ## creating a dataframe
colnames(category)=c("cat","subcat") ## giving column names
for (i in 1:nrow(funds_return.table))
{
if ( is.na(funds_return.table$onemonth_perc[i]) )
{
categ=funds_return.table$Name[i]
subcateg = ""
}
else
{
subcateg=funds_return.table$Name[i]
}
if (length(subcateg) > 0)
{
category$cat[i]=categ
category$subcat[i]=subcateg
}
}
etf_return.table=merge(etf_return.table,category,by.x="SubCategory", by.y="subcat", all.x=T)
View(etf_return.table)
a=etf_return.table
a$Name[1]
b=gsub("\\(|\\)", "<>",a$Name[1])
b
str_locate(a$name[1],"<>")
gregexpr(pattern ='<>',a$name)
gregexpr(pattern ="<>",a$Name[1])
lapply(strsplit(a$Name[1], ''), function(x) which(x == "<>"))
str_locate(a$Name[1],"<>")
a=etf_return.table
b=gsub("\\(|\\)", "*",a$Name[1])
b
b=gsub("\\(|\\)", "<>",a$Name[1])
str_locate(b,"<>")
str_locate(b,"<>")[1]
which(strsplit(b, "")[[1]]=="<>")
x="1234"
strsplit(x,"")
b=apply(a$Name,2,function(x) str_sub(x,4,1))
dim(a$Name)
b=sapply(a$Name,function(x) str_sub(x,4,1))
b
b[1]
b=sapply(1:3, function(x) x^2)
b
b=sapply(a$Name[1:3],function(x) str_sub(x,4,1))
b
str_sub(a$Name[1],4,1)
str_sub(a$Name[1],1,4)
b=sapply(a$Name[1:3],function(x) str_sub(x,1,4))
b
str_locate("a$Name,"\\(|\\")
str_locate("a$Name,"\\(")
str_locate("a$Name,"\(")
str_locate(a$Name,"\(")
str_locate(a$Name,"\\(")
str_locate(a$Name[1],"\\(")
str_locate(a$Name[1],"\\(")[1]
str_locate(a$Name[1],"\\(")[1] +1
?str_sub
str_sub(a$Name[1],str_locate(a$Name[1],"\\(")[1] +1,str_length(a$Name[1]))
str_sub(a$Name[1],str_locate(a$Name[1],"\\(")[1] +1,str_length(a$Name[1])-1)
b=apply(a$Name[1],function(x) str_sub(x,str_locate(x,"\\(")[1] +1,str_length(x)-1) )
b=apply(a$Name[1],function(x) str_sub(x,1,3) )
b=sapply(a$Name[1],function(x) str_sub(x,str_locate(x,"\\(")[1] +1,str_length(x)-1) )
b
b=sapply(a$Name,function(x) str_sub(x,str_locate(x,"\\(")[1] +1,str_length(x)-1) )
str[b]
a$sym=b
View(a)
a$Symbol=apply(etf_return.table$Name,function(x) str_sub(x,str_locate(x,"\\(")[1] +1,str_length(x)-1) )
a$Symbol=sapply(etf_return.table$Name,function(x) str_sub(x,str_locate(x,"\\(")[1] +1,str_length(x)-1) )
View(a)
etf_return.table$Symbol=sapply(etf_return.table$Name,function(x) str_sub(x,str_locate(x,"\\(")[1] +1,str_length(x)-1) )
View(etf_return.table)
etf_return.table=etf_return.table[-which(is.na(etf_return.table$cat)),]
endDate=Sys.Date()
startDate=Sys.Date() -1
returnFile="quotes.dat"
# Load the ETF returns object, if the save file exists or write out the save file
if (file.exists(returnFile ) == T)
{
load( returnFile )
} else {
prices.mat = buildQuoteMatrix(etf_return.table$Symbol, period="d", startDate, endDate)
##rfTenYear = weeklyRate(rfSym, startDate, endDate)
##mkt = get.hist.quote( mktSym, startDate, endDate, provider="yahoo", compression="w", quote="AdjClose", quiet=T)
##save(prices.mat, mkt, rfTenYear, file=returnFile)
}
which(etf_return_table$Symbol=="QEFA")
which(etf_return.table$Symbol=="QEFA")
etf_return.table$Symbol[394]
etf_return.table$Symbol[395]
etf_return.table[395]
etf_return.table[395,]
str_sub(etf_return.table$Name[1],-6,-1)
etf_return.table$Symbol=sapply(str_sub(etf_return.table$Name,-6,-1),function(x) str_sub(x,str_locate(x,"\\(")[1] +1,str_length(x)-1) )
etf_return.table[395,]
etf_return.table[394,]
View(etf_return.table)
View(etf_return.table)
if (file.exists(returnFile ) == T)
{
load( returnFile )
} else {
prices.mat = buildQuoteMatrix(etf_return.table$Symbol, period="d", startDate, endDate)
##rfTenYear = weeklyRate(rfSym, startDate, endDate)
##mkt = get.hist.quote( mktSym, startDate, endDate, provider="yahoo", compression="w", quote="AdjClose", quiet=T)
##save(prices.mat, mkt, rfTenYear, file=returnFile)
}
which(etf_return.table$Symbol=="EFNL")
etf_return.table[958,]
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="EFNL")),] ## remove EFNL
if (file.exists(returnFile ) == T)
{
load( returnFile )
} else {
prices.mat = buildQuoteMatrix(etf_return.table$Symbol, period="d", startDate, endDate)
##rfTenYear = weeklyRate(rfSym, startDate, endDate)
##mkt = get.hist.quote( mktSym, startDate, endDate, provider="yahoo", compression="w", quote="AdjClose", quiet=T)
##save(prices.mat, mkt, rfTenYear, file=returnFile)
}
which(etf_return.table$Symbol=="EMSA")
etf_return.table[1357,]
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="EMSA")),] ## remove EMSA
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="VLSM")),] ## remove VLSM
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="MFLA")),] ## remove MFLA
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="EFNL")),] ## remove EFNL
etf_return.table=unique(etf_return_raw.table)
etf_return.table=etf_return.table[,2:nc_etf] ## remove blank columns
etf_return.table=etf_return.table[-(which(is.na(etf_return.table[,1]))),] ## remove rows with NA value
colnames(etf_return.table)=etf_return.table[1,] ## set column names
etf_return.table=etf_return.table[-1,] ## remove first row having column names
colnames(etf_return.table)[2] = "SubCategory" ## renaming the column to sub-category
etf_return.table <- etf_return.table[order(etf_return.table$SubCategory), ] ## sorting by sub category
funds_return.table=unique(funds_return_raw.table[,1:2])
##colnames(funds_return.table) <- sub(" ", "", colnames(funds_return.table)) ## remove spaces from colnames
colnames(funds_return.table)[2] = "onemonth_perc"
## creating a dataframe for category and sub-category
category=data.frame(matrix(NA, nrow = nrow(funds_return.table), ncol = ncol(funds_return.table))) ## creating a dataframe
colnames(category)=c("cat","subcat") ## giving column names
for (i in 1:nrow(funds_return.table))
{
if ( is.na(funds_return.table$onemonth_perc[i]) )
{
categ=funds_return.table$Name[i]
subcateg = ""
}
else
{
subcateg=funds_return.table$Name[i]
}
if (length(subcateg) > 0)
{
category$cat[i]=categ
category$subcat[i]=subcateg
}
}
## Merging to get category column in the dataframe
etf_return.table=merge(etf_return.table,category,by.x="SubCategory", by.y="subcat", all.x=T)
## processing the dataframe to get the symbols
## use str_sub to cut the string from back
## use sub to replace spaces and gsub to replace brackets
##etf_return.table$Symbol=gsub("\\(|\\)", "",sub(" ", "", str_sub(etf_return.table$Name,-6,-1)))
etf_return.table$Symbol=sapply(str_sub(etf_return.table$Name,-6,-1),function(x) str_sub(x,str_locate(x,"\\(")[1] +1,str_length(x)-1) )
## remove rows having category as NA
etf_return.table=etf_return.table[-which(is.na(etf_return.table$cat)),]
## correcting symbol for qCN
##etf_return.table$Symbol[11]="CN"
## removing rows for symbol IBDN,IBDM
##etf_return.table=etf_return.table[-152,] ## IBDN
##etf_return.table=etf_return.table[-152,] ## IBDM
##etf_return.table=etf_return.table[-152,] ## IBDK
etf_return.table=etf_return.table[-(which(etf_return.table$TradingVolume==0)),] ## remove all rows having tradingvolume=0
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="VLSM")),] ## remove VLSM
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="EMSA")),] ## remove EMSA
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="MFLA")),] ## remove MFLA
etf_return.table=etf_return.table[-(which(etf_return.table$Symbol=="EFNL")),] ## remove EFNL
if (file.exists(returnFile ) == T)
{
load( returnFile )
} else {
prices.mat = buildQuoteMatrix(etf_return.table$Symbol, period="d", startDate, endDate)
##rfTenYear = weeklyRate(rfSym, startDate, endDate)
##mkt = get.hist.quote( mktSym, startDate, endDate, provider="yahoo", compression="w", quote="AdjClose", quiet=T)
##save(prices.mat, mkt, rfTenYear, file=returnFile)
}
which(etf_return.table$Symbol=="SPGH")
etf_return.table[1473,]
etf_return.table[1474,]
which(isnull(etf_return.table$Symbol))
which(etf_return.table$Symbol)==""
which(etf_return.table$Symbol=="")
etf_return.table=etf_return.table[-which(etf_return.table$Symbol==""),] ## remove blank symbol
if (file.exists(returnFile ) == T)
{
load( returnFile )
} else {
prices.mat = buildQuoteMatrix(etf_return.table$Symbol, period="d", startDate, endDate)
##rfTenYear = weeklyRate(rfSym, startDate, endDate)
##mkt = get.hist.quote( mktSym, startDate, endDate, provider="yahoo", compression="w", quote="AdjClose", quiet=T)
##save(prices.mat, mkt, rfTenYear, file=returnFile)
}
prices.mat[1]
anonymitypoll=read.csv("AnonymityPoll.csv")
## Demographics and Employment
setwd("D:/Analytics/Analytics_edge/Internet_Privacy_Poll")
anonymitypoll=read.csv("AnonymityPoll.csv")
summary(anonymitypoll)
str(anonymitypoll)
table(anonymitypoll$Smartphone)
table(is.na(anonymitypoll$Smartphone))
table(anonymitypoll$Sex, anonymitypoll$Region)
table(anonymitypoll$State,anonymitypoll$Region=="Midwest")
table(anonymitypoll$State,anonymitypoll$Region=="South")
str(anonymitypoll)
table(anonymitypoll$Internet.Use==0 & anonymitypoll$Smartphone==0)
table(anonymitypoll$Internet.Use==1 & anonymitypoll$Smartphone==0)
table(anonymitypoll$Internet.Use==0 & anonymitypoll$Smartphone==1)
table(anonymitypoll$Internet.Use==1 & anonymitypoll$Smartphone==1)
table(is.na(anonymitypoll$Internet.Use))
table(is.na(anonymitypoll$Smartphone))
limited=subset(anonymitypoll,(anonymitypoll$Internet.Use | anonymitypoll$Smartphone) )
summary(limited)
mean(limited$Info.On.Internet)
table(limited$Info.On.Internet)
table(limited$Info.On.Internet,limited$Worry.About.Info Privacy)
table(limited$Info.On.Internet,limited$Worry.About.Info)
table(limited$Worry.About.Info)
length(limited$Worry.About.Info)
(limited$Worry.About.Info==1)/length(limited$Worry.About.Info)
sum(limited$Worry.About.Info==1)/length(limited$Worry.About.Info)
sum(limited$Worry.About.Info==1)/length(limited$Worry.About.Info, na.rm=T)
## Demographics and Employment
table(limited$Worry.About.Info)
386/404+386
386/(404+386)
summary(limited)
length(limited$Anonymity.Possible)
sum(limited$Anonymity.Possible==1)/length(limited$Anonymity.Possible)
sum(limited$Anonymity.Possible==1,na.rm=T)/length(limited$Anonymity.Possible)
table(limited$Anonymity.Possible)
278/(278+475)
table(limited$Tried.Masking.Identity)
128/(128+656)
278/(278+475)
table(limited$Privacy.Laws.Effective)
186/(186+541)
?hist
hist(limited$Afe)
hist(limited$Age)
plot(limited$Age, limited$Info.On.Internet)
Build a histogram of the age of interviewees. What is the best represented age group in the population?
table(limited$Age, limited$Info.On.Internet)
max(table(limited$Age, limited$Info.On.Internet))
jitter(c(1, 2, 3)),
jitter(c(1, 2, 3))
jitter(c(1, 2, 3))
jitter(c(1))
jitter(c(1))
jitter(c(1))
plot(jitter(limited$Age), jitter(limited$Info.On.Internet))
tapply(limited$Info.On.Internet,limited$Smartphone,mean)
tapply(limited$Tried.Masking.Identity==T,limited$Smartphone,mean)
tapply(limited$Tried.Masking.Identity,limited$Smartphone,mean)
tapply(limited$Tried.Masking.Identity,limited$Smartphone,mean,na.rm=T)
tapply(limited$Tried.Masking.Identity==1,limited$Smartphone,mean,na.rm=T)
summary(limited$Tried.Masking.Identity)
table(limited$Tried.Masking.Identity)
limited$Tried.Masking.Identity[1:5]
table(limited$Tried.Masking.Identity==1)
tapply(limited$Tried.Masking.Identity==1,limited$Smartphone,mean,na.rm=T)
tapply(limited$Tried.Masking.Identity=="1",limited$Smartphone,mean,na.rm=T)
