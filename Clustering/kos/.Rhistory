sd(mpg[-10:85,])
sd(auto$mpg[-10:85,])
sd(auto$mpg[-(10:85),])
auto$mpg[10]
auto$mpg[-10:50]
auto$mpg[-10:50,]
savehistory()
auto$mpg[c(1:10,86:397),]
auto$mpg[c(1:10),]
auto$mpg[(1:10),]
auto$mpg[1:10,]
auto$mpg(1:10,)
auto$mpg[10,]
auto$mpg[(1:10)]
auto$mpg[-(10:85)]
auto$mpg[10]
summary(auto)
str(auto)
plot(mpg,cylinders)
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(origin,mpg)
Boston
library(Mass)
library(MASS)
Boston
str(Boston)
?Boston
load(Boston)
fix(Boston)
pair(Boston$black,Boston$crim)
pairs(Boston$black,Boston$crim)
pairs(~Boston$black + Boston$crim)
summary(crim)
summary(Boston$crim)
summary(Boston$black)
savehistory()
str(Boston)
library(MASS)
str(Boston)
pairs(Boston)
?Boston
Boston[1,]
plot(Boston$zn,Boston$crim)
Boston[zn=0]
Boston(zn=0)
Boston[zn=0,]
Boston[Boston$zn=0,]
Boston[Boston$zn==0,]
str(Boston)
plot(Boston$zn,Boston$ptratio)
pairs(Boston$zn,Boston$crim)
pairs(~Boston$zn,Boston$crim)
pairs(~Boston$zn+Boston$crim)
pairs(~Boston$zn+Boston$ptratio)
pairs(~Boston$zn+Boston$tax)
pairs(~Boston$zn+Boston$chas)
savehistory()
quit
quit()
library(MASS)
str(Boston)
a=c[1,2,3,4]
a=c(1,2,3,4)
median(a)
med(Boston$ptratio)
median(Boston$ptratio)
summary(Boston$ptratio)
?Boston
summary(Boston$medv)
Boston[Boston$medv=min(Boston$medv)]
Boston[Boston$medv=min(Boston$medv),]
Boston[Boston$medv==min(Boston$medv),]
summary(Boston$lstat)
summary(Boston$black)
summary(Boston$tax)
summary(Boston$crim)
mean(a)
a=c(1,2,3,8,7)
mean(a)
median(a)
a=c(1,2,3,8,7,9)
mean(a)
median(a)
Boston[Boston$rm>7,]
count(Boston[Boston$rm>7,])
cnt(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>8,])
(Boston[Boston$rm>8,])
summary(Boston$crim)
savehistory()
summary(Boston$crim)
library(MASS)
library(ISLR)
install.packages("ISLR")
?Boston
fix(Boston)
fix(Boston)
?fix
names(Boston)
?Boston
lm.fit=lm(med~lstat)
lm.fit=lm(med~lstat,data=Boston)
lm.fit=lm(medv~lstat,data=Boston)
lm.fit
summary(lm.fit)
lm.fit$coefficients
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
?Boston
Boston$lstat[1,1]
Boston$lstat[1]
predict(lm.fit,data.frame(lstat=c(5,10,15))),interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))),interval="confidence")
summary(boston?medv)
summary(Boston?medv)
summary(Boston$medv)
summary(Boston$lstat)
install.packages("ISLR")
plot(Boston$medv,Boston$lstat)
?Boston
plot(Boston$lstat,Boston$medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(Boston$lstat,Boston$medv,col="red")
plot(Boston$lstat,Boston$medv,pch=20)
plot(Boston$lstat,Boston$medv,pch="+")
plot(Boston$lstat,Boston$medv,pch="*")
plot(Boston$lstat,Boston$medv,pch="R")
plot(Boston$lstat,Boston$medv,pch="/")
plot (1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),restudent(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(plot(hatvalues(lm.fit)))
which.max(hatvalues(lm.fit))
21126909
8663166526
savehistory()
exit
quit
quit
quit()
library(MASS)
quit()
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
library(XML)
etf.table= readHTMLTable(etf)
etf.table
str(etf.table)
etf = "finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
u = "http://en.wikipedia.org/wiki/List_of_countries_by_population"
tables = readHTMLTable(u)
tables
names(tables)
tables[[2]]
tmp = tables[[2]]
tmp
airline = "http://www.theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
airline.table = readHTMLTable(airline, header=T, which=1,stringsAsFactors=F)
View(airline.table)
airline.table = readHTMLTable(airline)
etf.table= readHTMLTable(etf,header=T,which=1,stringsAsFactors=F)
etf
tables = readHTMLTable(u,stringsAsFactors=F)
tables
etf.table= readHTMLTable(etf,stringsAsFactors=F)
etf.table
etf.table= readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etf.table)
etf.table= readHTMLTable(etf,which=2,stringsAsFactors=F)
View(etf.table)
etf.table
install.packages("RCurl")
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
library("zoo")
library("fPortfolio")
library("PerformanceAnalytics")
?maxreturnPortfolio
??maxreturnPortfolio
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/Analytics/R-code/portfolio_optimization_prediction/CG_CVAR_portman.R')
quit()
quit()
setwd("D:/Analytics/Analytics_edge/clustering/kos")
kos = read.csv("dailykos.csv", header = FALSE)
str(kos)
kosmat = as.matrix(kosmat)
kosmat = as.matrix(kos)
str(kosmat)
kosvec = as.vector(kosmat)
distance = dist(kosvec , method = "euclidean")
rm(kosmat)
distance = dist(kosvec , method = "euclidean")
library(flexclust)
distance = dist(kosvec , method = "euclidean")
(3431 * 3430)/2
str(kosvec)
3431 * 1545
gc()
distance = dist(kosvec , method = "euclidean")
?gc
rm(list=ls())
setwd("D:/Analytics/Analytics_edge/clustering/kos")
kos = read.csv("dailykos.csv", header = TRUE)
kosmat = as.matrix(kos)
str(kosmat)
kosvec = as.vector(kosmat)
distance = dist(kosvec,method = "euclidean")
str(kosvec)
(3430*3429)/2
distance = dist(kosvec, method = "euclidean")
## Kos
rm(list=ls())
setwd("D:/Analytics/Analytics_edge/clustering/kos")
kos = read.csv("dailykos.csv", header = TRUE)
kosmat = as.matrix(kos)
str(kosmat)
kosvec = as.vector(kosmat)
distance = dist(kosvec, method = "euclidean")
rm(list=ls())
library(flexclust)
setwd("D:/Analytics/Analytics_edge/clustering/kos")
kos = read.csv("dailykos.csv", header = TRUE)
distance = dist(kosvec, method = "euclidean")
str(kos)
kosmat = as.matrix(kos)
str(kosmat)
## converting to vector
kosvec = as.vector(kosmat)
rm(list=ls())
library(flexclust)
setwd("D:/Analytics/Analytics_edge/clustering/kos")
kos = read.csv("dailykos.csv", header = TRUE)
distance = dist(kos, method = "euclidean")
str(kos)
kosclust = hclust(distance , method = "ward.D")
plot(kosclust)
rect.hclust(kosclust,k=3, border = "red")
rect.hclust(kosclust,k=2, border = "red")
rect.hclust(kosclust,k=3, border = "red")
plot(kosclust)
rect.hclust(kosclust,k=7, border = "red")
kosclusters = cutree(kosclust,k=7)
str(kosclusters)
summary(kosclusters)
str(kosclust)
kosclusters[1:10]
## Kos
rm(list=ls())
library(flexclust)
setwd("D:/Analytics/Analytics_edge/clustering/kos")
kos = read.csv("dailykos.csv", header = TRUE)
distance = dist(kos, method = "euclidean")
kosclust = hclust(distance , method = "ward.D")
plot(kosclust)
rect.hclust(kosclust,k=7, border = "red")
kosclusters = cutree(kosclust,k=7)
kosclusters == 1
kosclusters == 2
library(flexclust)
kosclusters = cutree(kosclust,k=7)
str(kosclusters)
## movie lens
rm(list=ls())
setwd("D:/Analytics/Analytics_edge/clustering/movielens")
movies = read.table("movielens.txt", header=FALSE, sep="|", quote = "\"")
str(movies)
colnames(movies) = c("ID","Title","ReleaseDate","VideaReleaseDate", "IMDB", "Unknown","Action","Adventure","Animation","Childrens","Comedy","Crime","Documentary","Drama","Fantasy","FilmNoir","Horror","Musical","Mystery","Romance","SciFi","Thriller","War","Western")
movies$ID=NULL
movies$ReleaseDate=NULL
movies$VideaReleaseDate=NULL
movies$IMDB=NULL
movies = unique(movies)
table(movies$Comedy)
table(movies$Western)
table(movies$Romance & movies$Drama)
distances = dist(movies[2:20] , method = "euclidean")
clusterMovies = hclust(distances,method = "ward.D2")
## plotting the dendrogram
plot(clusterMovies)
## assigning the cluster names
clusterGroups = cutree(clusterMovies,k=10)
str(clusterGroups)
clusterGroups[257]
kosclusters[10]
## Kos
rm(list=ls())
library(flexclust)
setwd("D:/Analytics/Analytics_edge/clustering/kos")
kos = read.csv("dailykos.csv", header = TRUE)
distance = dist(kos, method = "euclidean")
kosclust = hclust(distance , method = "ward.D")
plot(kosclust)
rect.hclust(kosclust,k=7, border = "red")
kosclusters = cutree(kosclust,k=7)
cluster1 = subset()
kosclusters[5]
length( kosclusters == 1)
length( kosclusters == 2)
str(distance)
kosclust = hclust(distance , method = "ward.D")
str(kosclust)
kosclusters = cutree(kosclust,k=7)
str(kosclusters)
nrow(kosclusters == 1)
length(kosclusters == 1)
(kosclusters == 1)
cluster1 = subset(kosclusters , kosclustters == 1)
cluster1 = subset(kosclust , kosclusters == 1)
length(cluster1)
cluster1 = subset(kosclust , kosclusters == 1)
cluster2 = subset(kosclust , kosclusters == 2)
cluster3 = subset(kosclust , kosclusters == 3)
cluster4 = subset(kosclust , kosclusters == 4)
cluster5 = subset(kosclust , kosclusters == 5)
cluster6 = subset(kosclust , kosclusters == 6)
cluster7 = subset(kosclust , kosclusters == 7)
str(cluster3)
a = c(1,2,3)
b = c(3,4,5,6)
max(a,b)
greater(a,b)
highest(a,b)
max(length(a),length(b))
length(cluster1)
length(cluster1)
length(cluster2)
length(cluster3)
length(cluster4)
length(cluster5)
length(cluster6)
length(cluster7)
HierCluster = split(kosclust, hierGroups)
hierGroups = c(1,2,3,4,5,6,7)
HierCluster = split(kosclust, hierGroups)
str(hierCluster)
str(HierCluster)
nrow(HierCluster[[1]])
length(HierCluster[[1]])
HierCluster[[1]]
str(HierCluster[[1]])
HierCluster = split(kosclusters, hierGroups)
str(HierCluster[[1]])
str(HierCluster[[2]])
str(HierCluster[[3]])
str(HierCluster[[4]])
HierCluster = split(kosclust, kosclusters)
str(HierCluster[[1]])
length(HierCluster[[1]])
nrow(HierCluster[[1]])
HierCluster = split(kos, kosclusters)
nrow(HierCluster[[1]])
HierCluster[[1]]
tail(sort(colMeans(HierCluster1)))
tail(sort(colMeans(cluster1)))
cluster1 = subset(kos , kosclusters == 1)
cluster2 = subset(kos , kosclusters == 2)
cluster3 = subset(kos , kosclusters == 3)
cluster4 = subset(kos , kosclusters == 4)
cluster5 = subset(kos , kosclusters == 5)
cluster6 = subset(kos , kosclusters == 6)
cluster7 = subset(kos , kosclusters == 7)
tail(sort(colMeans(cluster1)))
head(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
kmc = kmeans(kos , centers=k)
k=7
set.seed(1000)
k=7
kmc = kmeans(kos , centers=k)
str(kmc)
kHierCluster = kmc$cluster
str(kHierCluster)
kHierCluster = split(kos,kmc$cluster)
str(kHierCluster)
length(kmc$cluster == 1)
nrow(kmc$cluster == 1)
str(kmc)
length(kHierCluster[[1]])
length(kHierCluster[[2]])
length(kHierCluster[[3]])
kHierCluster = split(kos,kmc$size)
length(kHierCluster[[3]])
length(kHierCluster[[2]])
kHierCluster = split(kos,kmc$cluster == 1)
str(kHierCluster)
kmc$size
kHierCluster = split(kmc$cluster,kmc$size)
str(kHierCluster)
str(kosclusters)
kHierCluster[[1]]
str(kos)
str(kosclusters)
str(kmc$cluster)
kHierCluster = split(kos , kmc$cluster)
str(kHierCluster)
class(kmc$cluster)
kmc$cluster[1:10]
kos[1:10]
kmc$cluster[1:10]
kos[1:10,]
a = c(1,2,3,4,5)
b = c(1,2)
split(a,b == 1)
b == 1
b = c(1,2,4,6,7)
split(a,b == 1)
a
a = as.data.frame(a)
split(a,b == 1)
str(a)
a = c(1,2,3,4,5,6)
a = as.data.frame(a,ncol=2)
split(a,b == 1)
a
str(a)
dim(a)= c(3,2)
a = matrix(a,2,3)
a
a
a = c(1,2,3,4,5,6)
a = matrix(a,2,3)
a
split(a,b==1)
b == 1
class(kos)
class(kmc$cluster)
b=as.integer(b)
b
a = as.data.frame(a)
split(a,b==1)
b == 1
?spliut
?split
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
g
x
n <- 10; nn <- 20
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
g
x
n <- 10; nn <- 20
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
A <- c(1,2,3,4)
B <- c("X","Y","X","Y")
spit(A,B)
split(A,B)
kHierCluster = split(kos , kmc$cluster)
str(kHierCluster)
summary(kHierCluster)
str(kmc)
kmc$size
tail(sort(colMeans(kHierCluster[[1]])))
tail(sort(colMeans(kHierCluster[[2]]))) ## corresponds to iraq war
set.seed(1000)
k=7
kmc = kmeans(kos , centers=k)
str(kmc)
kHierCluster = split(kos , kmc$cluster)
tail(sort(colMeans(kHierCluster[[1]]))) ## corresponds to iraq war
tail(sort(colMeans(kHierCluster[[2]]))) ## corresponds to democratic party leaders
tail(sort(colMeans(kHierCluster[[3]]))) ## corresponds to iraq war
tail(sort(colMeans(kHierCluster[[4]]))) ## corresponds to iraq war
tail(sort(colMeans(kHierCluster[[5]]))) ## corresponds to iraq war
table(HierCluster[[1]] , HierCluster[[2]])
table(HierCluster[[1]] , kHierCluster[[2]])
tail(sort(colMeans(kHierCluster[[2]]))) ## corresponds to democratic party leaders
tail(sort(colMeans(HierCluster[[1]]))) ## corresponds to democratic party leaders
tail(sort(colMeans(HierCluster[[2]]))) ## corresponds to democratic party leaders
tail(sort(colMeans(HierCluster[[3]]))) ## corresponds to democratic party leaders
tail(sort(colMeans(HierCluster[[4]]))) ## corresponds to democratic party leaders
tail(sort(colMeans(HierCluster[[5]]))) ## corresponds to democratic party leaders
tail(sort(colMeans(HierCluster[[6]]))) ## corresponds to democratic party leaders
tail(sort(colMeans(HierCluster[[7]]))) ## corresponds to democratic party leaders
tail(sort(colMeans(kHierCluster[[2]]))) ## corresponds to democratic party leaders
table(kosclusters, kmc$cluster)
quit()
