str(college)
college[1,]
rownames(college)
rownames(college)=college[,1]
college[1,]
fix(college)
college=college[,-1]
fix(college)
fix(college)
summary(college)
?pairs
pairs(college[,1:10])
pairs(college[,1:2])
pairs(college[,1:1])
pairs(college[,1])
?boxplot
?plot
plot(college$private,college$outstate)
plot(factor(college$private),college$outstate)
pripub=factor(college$private)
str(pripub)
pripub=as.factor(college$private)
str(pripub)
pripub=as.factor(college$Private)
plot(as.factor(college$Private),college$Outstate)
plot(as.factor(college$Private),college$Outstate,xlab="Private",ylab="Outstate", main="Provate VS Outstate")
plot(as.factor(college$Private),college$Outstate,xlab="Private",ylab="Outstate", main="Private VS Outstate")
Elite=rep("No",nrow(college))
str(Elite)
Elite[college$Top10perc>50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
fix(college)
str(Elite)
summary(college)
plot(as.factor(college$Elite),college$Outstate,xlab="Elite",ylab="Outstate", main="Elite VS Outstate")
?hist
par(mfrow=c(2,2))
plot(as.factor(college$Elite),college$Outstate,xlab="Elite",ylab="Outstate", main="Elite VS Outstate")
hist(college$apps,college$accept)
hist(college$Apps,college$Accept)
hist(college$Apps,college$Accept,breaks=1000)
hist(college$Apps,college$Accept,breaks=10)
hist(college$Apps,college$Accept,breaks=2)
?hist
hist(college$Apps,college$Accept,breaks=1000)
par(mfrow=c(1,1))
hist(college$Apps,college$Accept,breaks=1000)
plot(college$Apps,college$Accept)
str(college)
hist(college$Grad.Rate)
plot(college$Elite,college$Grad.Rate)
summary(college$Grad.Rate)
plot(college$Apps,college$Accept)
plot(college$Accept,college$Enroll)
plot(college$Elite,(college$Room.Board)+(college$Books)+(college$Personal))
plot(college$Phd,college$Grad.Rate)
summary(colege$Phd)
summary(college$Phd)
plot(college$PhD,college$Grad.Rate)
plot(college$Terminal,college$Grad.Rate)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt")
str(auto)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings=?)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings="?")
str(auto)
range(mpg)
summary(auto)
range(weight)
mean(mpg)
sd(mpg)
sd(mpg[-10:85,])
sd(auto$mpg[-10:85,])
sd(auto$mpg[-(10:85),])
auto$mpg[10]
auto$mpg[-10:50]
auto$mpg[-10:50,]
savehistory()
auto$mpg[c(1:10,86:397),]
auto$mpg[c(1:10),]
auto$mpg[(1:10),]
auto$mpg[1:10,]
auto$mpg(1:10,)
auto$mpg[10,]
auto$mpg[(1:10)]
auto$mpg[-(10:85)]
auto$mpg[10]
summary(auto)
str(auto)
plot(mpg,cylinders)
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(origin,mpg)
Boston
library(Mass)
library(MASS)
Boston
str(Boston)
?Boston
load(Boston)
fix(Boston)
pair(Boston$black,Boston$crim)
pairs(Boston$black,Boston$crim)
pairs(~Boston$black + Boston$crim)
summary(crim)
summary(Boston$crim)
summary(Boston$black)
savehistory()
str(Boston)
library(MASS)
str(Boston)
pairs(Boston)
?Boston
Boston[1,]
plot(Boston$zn,Boston$crim)
Boston[zn=0]
Boston(zn=0)
Boston[zn=0,]
Boston[Boston$zn=0,]
Boston[Boston$zn==0,]
str(Boston)
plot(Boston$zn,Boston$ptratio)
pairs(Boston$zn,Boston$crim)
pairs(~Boston$zn,Boston$crim)
pairs(~Boston$zn+Boston$crim)
pairs(~Boston$zn+Boston$ptratio)
pairs(~Boston$zn+Boston$tax)
pairs(~Boston$zn+Boston$chas)
savehistory()
quit
quit()
library(MASS)
str(Boston)
a=c[1,2,3,4]
a=c(1,2,3,4)
median(a)
med(Boston$ptratio)
median(Boston$ptratio)
summary(Boston$ptratio)
?Boston
summary(Boston$medv)
Boston[Boston$medv=min(Boston$medv)]
Boston[Boston$medv=min(Boston$medv),]
Boston[Boston$medv==min(Boston$medv),]
summary(Boston$lstat)
summary(Boston$black)
summary(Boston$tax)
summary(Boston$crim)
mean(a)
a=c(1,2,3,8,7)
mean(a)
median(a)
a=c(1,2,3,8,7,9)
mean(a)
median(a)
Boston[Boston$rm>7,]
count(Boston[Boston$rm>7,])
cnt(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>8,])
(Boston[Boston$rm>8,])
summary(Boston$crim)
savehistory()
summary(Boston$crim)
library(MASS)
library(ISLR)
install.packages("ISLR")
?Boston
fix(Boston)
fix(Boston)
?fix
names(Boston)
?Boston
lm.fit=lm(med~lstat)
lm.fit=lm(med~lstat,data=Boston)
lm.fit=lm(medv~lstat,data=Boston)
lm.fit
summary(lm.fit)
lm.fit$coefficients
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
?Boston
Boston$lstat[1,1]
Boston$lstat[1]
predict(lm.fit,data.frame(lstat=c(5,10,15))),interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))),interval="confidence")
summary(boston?medv)
summary(Boston?medv)
summary(Boston$medv)
summary(Boston$lstat)
install.packages("ISLR")
plot(Boston$medv,Boston$lstat)
?Boston
plot(Boston$lstat,Boston$medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(Boston$lstat,Boston$medv,col="red")
plot(Boston$lstat,Boston$medv,pch=20)
plot(Boston$lstat,Boston$medv,pch="+")
plot(Boston$lstat,Boston$medv,pch="*")
plot(Boston$lstat,Boston$medv,pch="R")
plot(Boston$lstat,Boston$medv,pch="/")
plot (1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),restudent(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(plot(hatvalues(lm.fit)))
which.max(hatvalues(lm.fit))
21126909
8663166526
savehistory()
exit
quit
quit
quit()
library(MASS)
quit()
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
library(XML)
etf.table= readHTMLTable(etf)
etf.table
str(etf.table)
etf = "finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
u = "http://en.wikipedia.org/wiki/List_of_countries_by_population"
tables = readHTMLTable(u)
tables
names(tables)
tables[[2]]
tmp = tables[[2]]
tmp
airline = "http://www.theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
airline.table = readHTMLTable(airline, header=T, which=1,stringsAsFactors=F)
View(airline.table)
airline.table = readHTMLTable(airline)
etf.table= readHTMLTable(etf,header=T,which=1,stringsAsFactors=F)
etf
tables = readHTMLTable(u,stringsAsFactors=F)
tables
etf.table= readHTMLTable(etf,stringsAsFactors=F)
etf.table
etf.table= readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etf.table)
etf.table= readHTMLTable(etf,which=2,stringsAsFactors=F)
View(etf.table)
etf.table
install.packages("RCurl")
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
library("zoo")
library("fPortfolio")
library("PerformanceAnalytics")
?maxreturnPortfolio
??maxreturnPortfolio
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/Analytics/R-code/portfolio_optimization_prediction/CG_CVAR_portman.R')
quit()
quit()
## Stocks
rm(list=ls())
library(flexclust)
library(caret)
library(caTools)
setwd("D:/Analytics/Analytics_edge/clustering/stocks")
stocks = read.csv("StocksCluster.csv", header = TRUE)
str(stocks)
table(stocks$PositiveDec)
## maximum correlation between variables
cor(stocks)
## Which month (from January through November) has the largest mean return across all observations in the dataset?
max(colMeans(stocks[,1:11]))
min(colMeans(stocks[,1:11]))
## splitting the data
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
str(stocks)
StocksModel = glm(PositiveDec ~ . , data=stocksTrain , family="binomial")
predictStocks = predict(StocksModel,method = "response")
table(stocksTrain$PositiveDec , predictStocks)
str(predictStocks)
table(predictStocks,stocksTrain$PositiveDec)
table(stocksTrain$PositiveDec , predictStocks>0.5)
acc = (3324 + 737)/nrow(stocksTrain)
acc
table(stocksTrain$PositiveDec , predictStocks>0.5)
nrow(stocksTrain)
str(stocksTest)
str(stocksTrain)
predictStockstest = predict(StocksModel,newdata = stocksTest , method = "response")
table(stocksTest$PositiveDec , predictStockstest>0.5)
acctest = (1427+312)/nrow(stocksTest)
acctest
StocksModel = glm(PositiveDec ~ . , data=stocksTrain , family="binomial")
predictStocks = predict(StocksModel,method = "response")
summary(predictStocks)
predictStocks = predict(StocksModel)
table(stocksTrain$PositiveDec , predictStocks[,2]>0.5)
summary(predictStocks)
predictStocks = predict(StocksModel)
table(stocksTrain$PositiveDec , predictStocks>0.5)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec ~ . , data=stocksTrain , family="binomial")
predictStocks = predict(StocksModel))
table(stocksTrain$PositiveDec , predictStocks>0.5)
StocksModel = glm(PositiveDec ~ ., data=stocksTrain, family=binomial)
PredictTrain = predict(StocksModel, type="response")
table(stocksTrain$PositiveDec, PredictTrain > 0.5)
acc = (3640 + 990)/nrow(stocksTrain)
acc
predictStockstest = predict(StocksModel,newdata = stocksTest , method = "response")
table(stocksTest$PositiveDec , predictStockstest>0.5)
predictStockstest = predict(StocksModel,newdata = stocksTest , type = "response")
table(stocksTest$PositiveDec , predictStockstest>0.5)
acctest = (417+1553)/nrow(stocksTest)
acctest
table (stocksTrain$PositiveDec)
accbase = (4427/nrow(stocksTest))
accbase
nrow(stocksTest)
table (stocksTest$PositiveDec)
accbase = (1897/nrow(stocksTest))
nrow(stocksTest)
accbase
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
summary(limitedTrain)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
summary(normTrain)
summary(normTest)
summary(normTrain)mean(stocksTrain$ReturnJan)
mean(stocksTrain$ReturnJan)
mean(stocksTest$ReturnJan)
kmcTrain = kmeans(normTrain, centers = k)
k=3
kmcTrain = kmeans(normTrain, centers = k)
summary(kmcTrain)
summary(kmcTrain$cluster)
str(kmcTrain$cluster)
str(kmcTrain)
set.seed(144)
k=3
kmcTrain = kmeans(normTrain, centers = k)
str(kmcTrain)
set.seed(144)
k=3
km = kmeans(normTrain, centers = k)
km.kcca = as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata=normTest)
str(clusterTest)
table(clsterTest)
table(clusterTest)
stocksTraincluster = split(stocksTrain , km)
stocksTraincluster = split(stocksTrain , km$cluster)
str(stocksTraincluster)
stocksTestcluster = split(stocksTest , km$cluster)
table(stocksTraincluster)
summary(stocksTraincluster)
str(stocksTraincluster)
colMeans(stocksTraincluster)
colMeans(stocksTraincluster[1])
colMeans(stocksTraincluster[[1]])
lapply(stocksTraincluster, colMeans)
stocksTraincluster[[1]]$PositiveDec
StockModel1 = glm(PositiveDec ~ . , data=stocksTraincluster[[1]],family = "binomial")
StockModel2 = glm(PositiveDec ~ . , data=stocksTraincluster[[2]],family = "binomial")
StockModel3 = glm(PositiveDec ~ . , data=stocksTraincluster[[3]],family = "binomial")
str(StockModel1)
str(StockModel2)
str(StockModel3)
summary(StockModel1)
summary(StockModel2)
summary(StockModel3)
predicttest1 = predict(StockModel1 , newdata = stocksTestcluster[[1]] , type="response")
predicttest2 = predict(StockModel1 , newdata = stocksTestcluster[[2]] , type="response")
predicttest3 = predict(StockModel1 , newdata = stocksTestcluster[[3]] , type="response")
table(stocksTestcluster[[1]]$PositiveDec , predicttest1)
table(stocksTestcluster[[1]]$PositiveDec , predicttest1>0.5)
acc1 = (101+498)/nrow(stocksTestcluster[[1]])
acc1
table(stocksTestcluster[[2]]$PositiveDec , predicttest1>0.5)
table(stocksTestcluster[[2]]$PositiveDec , predicttest2>0.5)
acc2 = (243+985)/nrow(stocksTestcluster[[2]])
acc2
table(stocksTestcluster[[3]]$PositiveDec , predicttest3>0.5)
acc3 = (33+99)/nrow(stocksTestcluster[[3]])
acc3
predicttest1 = predict(StockModel1 , newdata = stocksTestcluster[[1]] , type="response")
predicttest2 = predict(StockModel2 , newdata = stocksTestcluster[[2]] , type="response")
predicttest3 = predict(StockModel3 , newdata = stocksTestcluster[[3]] , type="response")
table(stocksTestcluster[[1]]$PositiveDec , predicttest1>0.5)
table(stocksTestcluster[[2]]$PositiveDec , predicttest2>0.5)
acc2 = (361+862)/nrow(stocksTestcluster[[2]])
table(stocksTestcluster[[3]]$PositiveDec , predicttest3>0.5)
acc3 = (69+39)/nrow(stocksTestcluster[[3]])
acc2
acc3
nrow(stocksTestcluster[[1]]
)
nrow(stocksTestcluster[[2]]
)
stocksTestcluster = split(stocksTest , km$cluster)
kmtest = kmeans(normTest, centers = k)
stocksTestcluster = split(stocksTest , kmtest$cluster)
predicttest1 = predict(StockModel1 , newdata = stocksTestcluster[[1]] , type="response")
predicttest2 = predict(StockModel2 , newdata = stocksTestcluster[[2]] , type="response")
predicttest3 = predict(StockModel3 , newdata = stocksTestcluster[[3]] , type="response")
table(stocksTestcluster[[1]]$PositiveDec , predicttest1>0.5)
acc1 = (195+818)/nrow(stocksTestcluster[[1]])
table(stocksTestcluster[[2]]$PositiveDec , predicttest2>0.5)
acc2 = (126+136)/nrow(stocksTestcluster[[2]])
table(stocksTestcluster[[3]]$PositiveDec , predicttest3>0.5)
acc3 = (247+382)/nrow(stocksTestcluster[[3]])
acc1
acc2
acc3
stocksTestcluster = split(stocksTest , kmtest$cluster)
predicttest1 = predict(StockModel1 , newdata = stocksTestcluster[[1]] , type="response")
predicttest2 = predict(StockModel2 , newdata = stocksTestcluster[[2]] , type="response")
predicttest3 = predict(StockModel3 , newdata = stocksTestcluster[[3]] , type="response")
table(stocksTestcluster[[1]]$PositiveDec , predicttest1>0.5)
nrow(stocksTestcluster[[1]]
)
set.seed(144)
kmtest = kmeans(normTest, centers = k)
stocksTestcluster = split(stocksTest , kmtest$cluster)
predicttest1 = predict(StockModel1 , newdata = stocksTestcluster[[1]] , type="response")
predicttest2 = predict(StockModel2 , newdata = stocksTestcluster[[2]] , type="response")
predicttest3 = predict(StockModel3 , newdata = stocksTestcluster[[3]] , type="response")
table(stocksTestcluster[[1]]$PositiveDec , predicttest1>0.5)
acc1 = (30+32)/nrow(stocksTestcluster[[1]])
acc1
62/116
table(stocksTestcluster[[2]]$PositiveDec , predicttest2>0.5)
acc2 = (169+531)/nrow(stocksTestcluster[[2]])
table(stocksTestcluster[[3]]$PositiveDec , predicttest3>0.5)
acc3 = (863+238)/nrow(stocksTestcluster[[3]])
acc1
acc2
acc3
nrow(stocksTestcluster[[3]])
stocksTest3 = subset(stocksTest, clusterTest == 3)
nrow(stocksTest3)
str(clusterTrain)
stocksTraincluster = split(stocksTrain , clusterTrain)
stocksTestcluster = split(stocksTest , clusterTest)
StockModel1 = glm(PositiveDec ~ . , data=stocksTraincluster[[1]],family = "binomial")
StockModel2 = glm(PositiveDec ~ . , data=stocksTraincluster[[2]],family = "binomial")
StockModel3 = glm(PositiveDec ~ . , data=stocksTraincluster[[3]],family = "binomial")
summary(StockModel1)
summary(StockModel2)
summary(StockModel3)
predicttest1 = predict(StockModel1 , newdata = stocksTestcluster[[1]] , type="response")
predicttest2 = predict(StockModel2 , newdata = stocksTestcluster[[2]] , type="response")
predicttest3 = predict(StockModel3 , newdata = stocksTestcluster[[3]] , type="response")
table(stocksTestcluster[[1]]$PositiveDec , predicttest1>0.5)
acc1 = (38+774)/nrow(stocksTestcluster[[1]])
table(stocksTestcluster[[2]]$PositiveDec , predicttest2>0.5)
acc2 = (388+757)/nrow(stocksTestcluster[[2]])
table(stocksTestcluster[[3]]$PositiveDec , predicttest3>0.5)
acc3 = (49+13)/nrow(stocksTestcluster[[3]])
acc1
acc2
acc3
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes = c(stocksTestcluster[[1]]$PositiveDec, stocksTestcluster[[2]]$PositiveDec, stocksTestcluster[[3]]$PositiveDec)
AllPredictions = c(predicttest1, Predicttest2, Predicttest3)
AllOutcomes = c(stocksTestcluster[[1]]$PositiveDec, stocksTestcluster[[2]]$PositiveDec, stocksTestcluster[[3]]$PositiveDec)
AllPredictions = c(predicttest1, predicttest2, predicttest3)
AllOutcomes = c(stocksTestcluster[[1]]$PositiveDec, stocksTestcluster[[2]]$PositiveDec, stocksTestcluster[[3]]$PositiveDec)
table(AllOutcomes , AllPredictions)
a=c(1,2,3)
a>2
AllPredictions = c(predicttest1>0.5, predicttest2>0.5, predicttest3>0.5)
table(AllOutcomes , AllPredictions)
overacc = (467+1544)/nrow(AllOutcomes)
overacc
overacc = (467+1544)/nrow(AllOutcomes)
(467+1544)/nrow(AllOutcomes)
(467+1544)/length(AllOutcomes)
AllPredictions = c(predicttest1, predicttest2, predicttest3)
table(AllOutcomes , AllPredictions>0.5)
quit()
