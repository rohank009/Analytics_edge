read.table("D:/Analytics/Statistical_learning/Data/Auto.data")
dir
read.table("D:/Analytics/Statistical_learning/Data/test.txt")
read.table("D:/Analytics/Statistical_learning/Data/test.txt")
auto=read.table("D:/Analytics/Statistical_learning/Data/test.txt")
str(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt")
fix(auto)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings="?")
fix(auto)
dim(auto)
auto[1,2]
auto[1,]
auto=na.omit(auto)
dim(auto)
names(auto)
plot(cylinders,mpg)
plot(auto$cylinders,auto$mpg)
attach(auto)
plot(auto$cylinders,auto$mpg)
plot(cylinders,mpg)
cylinders=as.factor(auto$cylinders)
cylinders
plot(cylinders,mpg)
plot(cylinders,mpg,col=blue)
plot(cylinders,mpg,col="blue")
plot(cylinders,mpg,col="green")
plot(cylinders,mpg,col="green",varwidth=T)
plot(cylinders,mpg,col="green",varwidth=T,horizontal=T)
plot(cylinders,mpg,col="green",varwidth=T,xlab="cylinders",ylab="mpg")
plot(cylinders,mpg,col="green",varwidth=T,xlab="cylinders",ylab="mpg",main="Auto")
hist(mpg)
hist(cylinders)
hist(auto$cylinders)
hist(auto$cylinders,col=1)
hist(auto$cylinders,col=3)
hist(auto$cylinders,col=3,breaks=5)
hist(auto$cylinders,col=3,breaks=15)
hist(auto$cylinders,col=3,breaks=5)
hist(auto$cylinders,col=3,breaks=15)
hist(auto$cylinders,col=3,breaks=25)
hist(auto$cylinders,col=3,breaks=45)
pairs(Auto)
pairs(auto)
pairs(∼ mpg + displacement + horsepower + weight +
acceleration , Auto)
pairs(∼ mpg + displacement + horsepower + weight +
acceleration , auto)
plot(horsepower,mpg)
identify(horsepower,mpg,name)
summary(auto)
summary(cylinders)
summary(mpg)
rm(list=ls())
college=read.csv(D:/Analytics/Statistical_learning/Data/college.csv)
college=read.csv(D:\Analytics\Statistical_learning\Data\college.csv)
college=read.csv("D:\Analytics\Statistical_learning\Data\college.csv"")
college=read.csv("D:\Analytics\Statistical_learning\Data\college.csv")
college=read.csv("D:/Analytics/Statistical_learning/Data/college.csv")
fix(college)
rownames(college)=college[,1]
fix(college)
fix(college)
str(college)
college[1]
college[2,1]
college=read.csv("D:/Analytics/Statistical_learning/Data/college.csv")
college[2,1]
str(college)
college[1,]
rownames(college)
rownames(college)=college[,1]
college[1,]
fix(college)
college=college[,-1]
fix(college)
fix(college)
summary(college)
?pairs
pairs(college[,1:10])
pairs(college[,1:2])
pairs(college[,1:1])
pairs(college[,1])
?boxplot
?plot
plot(college$private,college$outstate)
plot(factor(college$private),college$outstate)
pripub=factor(college$private)
str(pripub)
pripub=as.factor(college$private)
str(pripub)
pripub=as.factor(college$Private)
plot(as.factor(college$Private),college$Outstate)
plot(as.factor(college$Private),college$Outstate,xlab="Private",ylab="Outstate", main="Provate VS Outstate")
plot(as.factor(college$Private),college$Outstate,xlab="Private",ylab="Outstate", main="Private VS Outstate")
Elite=rep("No",nrow(college))
str(Elite)
Elite[college$Top10perc>50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
fix(college)
str(Elite)
summary(college)
plot(as.factor(college$Elite),college$Outstate,xlab="Elite",ylab="Outstate", main="Elite VS Outstate")
?hist
par(mfrow=c(2,2))
plot(as.factor(college$Elite),college$Outstate,xlab="Elite",ylab="Outstate", main="Elite VS Outstate")
hist(college$apps,college$accept)
hist(college$Apps,college$Accept)
hist(college$Apps,college$Accept,breaks=1000)
hist(college$Apps,college$Accept,breaks=10)
hist(college$Apps,college$Accept,breaks=2)
?hist
hist(college$Apps,college$Accept,breaks=1000)
par(mfrow=c(1,1))
hist(college$Apps,college$Accept,breaks=1000)
plot(college$Apps,college$Accept)
str(college)
hist(college$Grad.Rate)
plot(college$Elite,college$Grad.Rate)
summary(college$Grad.Rate)
plot(college$Apps,college$Accept)
plot(college$Accept,college$Enroll)
plot(college$Elite,(college$Room.Board)+(college$Books)+(college$Personal))
plot(college$Phd,college$Grad.Rate)
summary(colege$Phd)
summary(college$Phd)
plot(college$PhD,college$Grad.Rate)
plot(college$Terminal,college$Grad.Rate)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt")
str(auto)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings=?)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings="?")
str(auto)
range(mpg)
summary(auto)
range(weight)
mean(mpg)
sd(mpg)
sd(mpg[-10:85,])
sd(auto$mpg[-10:85,])
sd(auto$mpg[-(10:85),])
auto$mpg[10]
auto$mpg[-10:50]
auto$mpg[-10:50,]
savehistory()
auto$mpg[c(1:10,86:397),]
auto$mpg[c(1:10),]
auto$mpg[(1:10),]
auto$mpg[1:10,]
auto$mpg(1:10,)
auto$mpg[10,]
auto$mpg[(1:10)]
auto$mpg[-(10:85)]
auto$mpg[10]
summary(auto)
str(auto)
plot(mpg,cylinders)
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(origin,mpg)
Boston
library(Mass)
library(MASS)
Boston
str(Boston)
?Boston
load(Boston)
fix(Boston)
pair(Boston$black,Boston$crim)
pairs(Boston$black,Boston$crim)
pairs(~Boston$black + Boston$crim)
summary(crim)
summary(Boston$crim)
summary(Boston$black)
savehistory()
str(Boston)
library(MASS)
str(Boston)
pairs(Boston)
?Boston
Boston[1,]
plot(Boston$zn,Boston$crim)
Boston[zn=0]
Boston(zn=0)
Boston[zn=0,]
Boston[Boston$zn=0,]
Boston[Boston$zn==0,]
str(Boston)
plot(Boston$zn,Boston$ptratio)
pairs(Boston$zn,Boston$crim)
pairs(~Boston$zn,Boston$crim)
pairs(~Boston$zn+Boston$crim)
pairs(~Boston$zn+Boston$ptratio)
pairs(~Boston$zn+Boston$tax)
pairs(~Boston$zn+Boston$chas)
savehistory()
quit
quit()
library(MASS)
str(Boston)
a=c[1,2,3,4]
a=c(1,2,3,4)
median(a)
med(Boston$ptratio)
median(Boston$ptratio)
summary(Boston$ptratio)
?Boston
summary(Boston$medv)
Boston[Boston$medv=min(Boston$medv)]
Boston[Boston$medv=min(Boston$medv),]
Boston[Boston$medv==min(Boston$medv),]
summary(Boston$lstat)
summary(Boston$black)
summary(Boston$tax)
summary(Boston$crim)
mean(a)
a=c(1,2,3,8,7)
mean(a)
median(a)
a=c(1,2,3,8,7,9)
mean(a)
median(a)
Boston[Boston$rm>7,]
count(Boston[Boston$rm>7,])
cnt(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>8,])
(Boston[Boston$rm>8,])
summary(Boston$crim)
savehistory()
summary(Boston$crim)
library(MASS)
library(ISLR)
install.packages("ISLR")
?Boston
fix(Boston)
fix(Boston)
?fix
names(Boston)
?Boston
lm.fit=lm(med~lstat)
lm.fit=lm(med~lstat,data=Boston)
lm.fit=lm(medv~lstat,data=Boston)
lm.fit
summary(lm.fit)
lm.fit$coefficients
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
?Boston
Boston$lstat[1,1]
Boston$lstat[1]
predict(lm.fit,data.frame(lstat=c(5,10,15))),interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))),interval="confidence")
summary(boston?medv)
summary(Boston?medv)
summary(Boston$medv)
summary(Boston$lstat)
install.packages("ISLR")
plot(Boston$medv,Boston$lstat)
?Boston
plot(Boston$lstat,Boston$medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(Boston$lstat,Boston$medv,col="red")
plot(Boston$lstat,Boston$medv,pch=20)
plot(Boston$lstat,Boston$medv,pch="+")
plot(Boston$lstat,Boston$medv,pch="*")
plot(Boston$lstat,Boston$medv,pch="R")
plot(Boston$lstat,Boston$medv,pch="/")
plot (1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),restudent(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(plot(hatvalues(lm.fit)))
which.max(hatvalues(lm.fit))
21126909
8663166526
savehistory()
exit
quit
quit
quit()
library(MASS)
quit()
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
library(XML)
etf.table= readHTMLTable(etf)
etf.table
str(etf.table)
etf = "finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
u = "http://en.wikipedia.org/wiki/List_of_countries_by_population"
tables = readHTMLTable(u)
tables
names(tables)
tables[[2]]
tmp = tables[[2]]
tmp
airline = "http://www.theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
airline.table = readHTMLTable(airline, header=T, which=1,stringsAsFactors=F)
View(airline.table)
airline.table = readHTMLTable(airline)
etf.table= readHTMLTable(etf,header=T,which=1,stringsAsFactors=F)
etf
tables = readHTMLTable(u,stringsAsFactors=F)
tables
etf.table= readHTMLTable(etf,stringsAsFactors=F)
etf.table
etf.table= readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etf.table)
etf.table= readHTMLTable(etf,which=2,stringsAsFactors=F)
View(etf.table)
etf.table
install.packages("RCurl")
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
library("zoo")
library("fPortfolio")
library("PerformanceAnalytics")
?maxreturnPortfolio
??maxreturnPortfolio
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/Analytics/R-code/portfolio_optimization_prediction/CG_CVAR_portman.R')
setwd("D:/Analytics/Analytics_edge/trees/letters")
letter = read.csv("letters_ABPR.csv")
str(letter)
summary(letter)
rm(list=ls())
setwd("D:/Analytics/Analytics_edge/trees/letters")
letters = read.csv("letters_ABPR.csv")
str(letter)
str(letters)
summary(letters)
letters$isB = as.factor(letters$letter == "B")
summary(letters)
library(caTools)
set.seed(1000)
spl = sample.split(letters$isB,SplitRatio = 0.5)
train = subset(letters , spl==T)
test = subset(letters , spl==F)
summary(train)
str(train)
str(test)
table(test$isB)
acc = 1175/nrow(test)
acc
library(rpart)
library(rpart.plot)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
prp(CARTb)
predtest = predict(CARTb, newdata=test , method="class")
table(test$isB , predtest)
summary(predtest)
str(predtest)
str(test)
table(test$isB , predtest)
str(test$isb)
str(test$isB)
str(predtest)
table(predtest,test$isB)
table(predtest,test$isB > 0.5)
table(predtest > 0.5,test$isB)
table(as.numeric(predtest),test$isB)
table(as.numeric(test$isB),predtest)
predtest
predtest[,2]
colnames(predtest[,2])
str(predtest)
str(predtest[,2])
predtest[5,]
table(test$isB , predtest[,2] > 0.5)
(1118+340)/nrow(test)
predictions = predict(CARTb, newdata=test, type="class")
table(test$isB, predictions)
predtest = predict(CARTb, newdata=test , type="class")
str(predtest)
table(test$isB , predtest)
accuracy = (1118+340)/nrow(test)
acc = (1118+340)/nrow(test)
acc
library(randomForest)
letterForest = randomforest(isB ~ . - letter, data=train)
letterForest = randomForest(isB ~ . - letter, data=train)
predForest = predict(letterForest , newdata=test)
table(test$isB , predForest)
str(predForest)
acc = (1163 + 375)/nrow(test)
acc
letters$letter = as.factor( letters$letter )
str(letters)
set.seed(2000)
spl = sample.split(letters$letter,SplitRatio = 0.5)
train = subset(letter,spl == T)
train = subset(letters,spl == T)
train = subset(letters,spl == F)
train = subset(letters,spl == T)
test = subset(letters,spl == F)
table(test$letter)
401/nrow(test)
str(test)
CARTletter = rpart(letter ~ . -isB , data=train , method = "class")
predletter = predict(CARTletter , newdata=test , type="class")
table(test$letter , predletter)
str(predletter)
(348 + 318 + 363 + 340)/nrow(test)
set.seed(1000)
letterForest = randomForest(letter ~ . -isB , data=train)
predForest = predict(letterForest , newdata=test)
table(test$letter , predForest)
(389 + 380 + 393 + 365)/nrow(test)
rm(list=ls())
setwd("D:/Analytics/Analytics_edge/trees/census")
census = read.csv("census.csv")
str(census)
set.seed(2000)
library(caTools)
spl = sample.split(census$over50k,SplitRatio = 0.6)
train = subset(census,spl == T)
test = subset(census,spl == F)
str(train)
str(test)
logm50k = glm(over50k ~ . , data=train , family = "binomial")
summary(logm50k)
predover50k = predict(logm50k , newdata=test , type="response")
table(test$over50k , predover50k > 0.5)
acc = (9051+1888)/nrow(test)
acc
table(test$over50k)
acc = 9713/nrow(test)
acc
library(ROCR)
ROCRpred = prediction (predover50k , test$over50k)
auc = as.numeric(performance(ROCRpred, "auc")@y.values) ## 0.5308461
auc
library(rpart)
library(rpart.plot)
CART50k = rpart(over50k ~ ., data=train , method = "class" )
prp(CART50k)
predCART50k = predict(CART50k , newdata=test, type = "class")
table(test$over50 , predCART50k)
acc = (9243 + 1596)/nrow(test)
acc
predCART50k = predict(CART50k , newdata=test)
ROCRpred = prediction (predCART50k , test$over50k)
auc = as.numeric(performance(ROCRpred, "auc")@y.values) ## 0.9061598
predCART50k = predict(CART50k , newdata=test)
ROCRpred = prediction (predCART50k , test$over50k)
predCART50k = predict(CART50k , newdata=test)
ROCRpred = prediction (predCART50k[,2] , test$over50k)
auc = as.numeric(performance(ROCRpred, "auc")@y.values) ## 0.9061598
auc
plot(auc)
perf = performance(pred,"tpr","fpr")
plot(perf)
perf = performance(ROCRpred,"tpr","fpr")
plot(perf)
trainSmall = train[sample(nrow(train), 2000), ]
set.seed(1)
library(randomForest)
over50kForest = randomForest(over50k ~ . data=trainSmall)
overkForest = randomForest(over50k ~ . data=trainSmall)
over50kForest = randomForest(over50k ~ . , data=trainSmall)
predictForest = predict(over50kForest , newdata=test)
table(test$over50k , predForest)
table(test$over50k , predForest[,2])
table(test$over50k , predictForest)
(9633 + 859)/nrow(test)
vu = varUsed(over50kForest, count=TRUE)
dotchart(vusorted$x, names(over50kForest$forest$xlevels[vusorted$ix]))
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(over50kForest$forest$xlevels[vusorted$ix]))
varImpPlot(over50kForest)
set.seed(2)
library(e1071)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
tr.control = trainControl(method = "CV" , number=10)
library(caret)
tr.control = trainControl(method = "CV" , number=10)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
tr = train(over50k ~ ., data=train , method = "rpart" , trControl = tr.control , tuneGrid = cp.grid)
tr = train(over50k ~ ., data=train , method = "rpart" , trControl = tr.control , tuneGrid = cartGrid)
str(tr)
tr
CARTcp = rpart(over50k ~ . , data=train, method = "class",cp=0.002)
predictcp = predict(CARTcp , newdata=test , type="class")
table(test$over50k , predictcp)
acc = (9178 + 1838)/nrow(test)
acc
prp(CARTcp)
quit()
