auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.data")
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.data")
load("D:/Analytics/Statistical_learning/Data")
load("D:/Analytics/Statistical_learning/Data/Auto.data")
load("D:/Analytics/Statistical_learning/Data/test")
load("D:/Analytics/Statistical_learning/Data/test.txt")
load("D:/Analytics/Statistical_learning/Data/test.txt")
load("D:/Analytics/Statistical_learning/Data/test.txt")
auto=read.table("Auto.data")
load("D:/Analytics/Statistical_learning/Data/Auto.data")
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.data")?read.table
?read.table
read.table("D:/Analytics/Statistical_learning/Data/Auto.data")
read.table("D:/Analytics/Statistical_learning/Data/Auto.data")
dir
read.table("D:/Analytics/Statistical_learning/Data/test.txt")
read.table("D:/Analytics/Statistical_learning/Data/test.txt")
auto=read.table("D:/Analytics/Statistical_learning/Data/test.txt")
str(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt")
fix(auto)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings="?")
fix(auto)
dim(auto)
auto[1,2]
auto[1,]
auto=na.omit(auto)
dim(auto)
names(auto)
plot(cylinders,mpg)
plot(auto$cylinders,auto$mpg)
attach(auto)
plot(auto$cylinders,auto$mpg)
plot(cylinders,mpg)
cylinders=as.factor(auto$cylinders)
cylinders
plot(cylinders,mpg)
plot(cylinders,mpg,col=blue)
plot(cylinders,mpg,col="blue")
plot(cylinders,mpg,col="green")
plot(cylinders,mpg,col="green",varwidth=T)
plot(cylinders,mpg,col="green",varwidth=T,horizontal=T)
plot(cylinders,mpg,col="green",varwidth=T,xlab="cylinders",ylab="mpg")
plot(cylinders,mpg,col="green",varwidth=T,xlab="cylinders",ylab="mpg",main="Auto")
hist(mpg)
hist(cylinders)
hist(auto$cylinders)
hist(auto$cylinders,col=1)
hist(auto$cylinders,col=3)
hist(auto$cylinders,col=3,breaks=5)
hist(auto$cylinders,col=3,breaks=15)
hist(auto$cylinders,col=3,breaks=5)
hist(auto$cylinders,col=3,breaks=15)
hist(auto$cylinders,col=3,breaks=25)
hist(auto$cylinders,col=3,breaks=45)
pairs(Auto)
pairs(auto)
pairs(∼ mpg + displacement + horsepower + weight +
acceleration , Auto)
pairs(∼ mpg + displacement + horsepower + weight +
acceleration , auto)
plot(horsepower,mpg)
identify(horsepower,mpg,name)
summary(auto)
summary(cylinders)
summary(mpg)
rm(list=ls())
college=read.csv(D:/Analytics/Statistical_learning/Data/college.csv)
college=read.csv(D:\Analytics\Statistical_learning\Data\college.csv)
college=read.csv("D:\Analytics\Statistical_learning\Data\college.csv"")
college=read.csv("D:\Analytics\Statistical_learning\Data\college.csv")
college=read.csv("D:/Analytics/Statistical_learning/Data/college.csv")
fix(college)
rownames(college)=college[,1]
fix(college)
fix(college)
str(college)
college[1]
college[2,1]
college=read.csv("D:/Analytics/Statistical_learning/Data/college.csv")
college[2,1]
str(college)
college[1,]
rownames(college)
rownames(college)=college[,1]
college[1,]
fix(college)
college=college[,-1]
fix(college)
fix(college)
summary(college)
?pairs
pairs(college[,1:10])
pairs(college[,1:2])
pairs(college[,1:1])
pairs(college[,1])
?boxplot
?plot
plot(college$private,college$outstate)
plot(factor(college$private),college$outstate)
pripub=factor(college$private)
str(pripub)
pripub=as.factor(college$private)
str(pripub)
pripub=as.factor(college$Private)
plot(as.factor(college$Private),college$Outstate)
plot(as.factor(college$Private),college$Outstate,xlab="Private",ylab="Outstate", main="Provate VS Outstate")
plot(as.factor(college$Private),college$Outstate,xlab="Private",ylab="Outstate", main="Private VS Outstate")
Elite=rep("No",nrow(college))
str(Elite)
Elite[college$Top10perc>50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
fix(college)
str(Elite)
summary(college)
plot(as.factor(college$Elite),college$Outstate,xlab="Elite",ylab="Outstate", main="Elite VS Outstate")
?hist
par(mfrow=c(2,2))
plot(as.factor(college$Elite),college$Outstate,xlab="Elite",ylab="Outstate", main="Elite VS Outstate")
hist(college$apps,college$accept)
hist(college$Apps,college$Accept)
hist(college$Apps,college$Accept,breaks=1000)
hist(college$Apps,college$Accept,breaks=10)
hist(college$Apps,college$Accept,breaks=2)
?hist
hist(college$Apps,college$Accept,breaks=1000)
par(mfrow=c(1,1))
hist(college$Apps,college$Accept,breaks=1000)
plot(college$Apps,college$Accept)
str(college)
hist(college$Grad.Rate)
plot(college$Elite,college$Grad.Rate)
summary(college$Grad.Rate)
plot(college$Apps,college$Accept)
plot(college$Accept,college$Enroll)
plot(college$Elite,(college$Room.Board)+(college$Books)+(college$Personal))
plot(college$Phd,college$Grad.Rate)
summary(colege$Phd)
summary(college$Phd)
plot(college$PhD,college$Grad.Rate)
plot(college$Terminal,college$Grad.Rate)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt")
str(auto)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T)
fix(auto)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings=?)
auto=read.table("D:/Analytics/Statistical_learning/Data/Auto.txt",header=T,na.strings="?")
str(auto)
range(mpg)
summary(auto)
range(weight)
mean(mpg)
sd(mpg)
sd(mpg[-10:85,])
sd(auto$mpg[-10:85,])
sd(auto$mpg[-(10:85),])
auto$mpg[10]
auto$mpg[-10:50]
auto$mpg[-10:50,]
savehistory()
auto$mpg[c(1:10,86:397),]
auto$mpg[c(1:10),]
auto$mpg[(1:10),]
auto$mpg[1:10,]
auto$mpg(1:10,)
auto$mpg[10,]
auto$mpg[(1:10)]
auto$mpg[-(10:85)]
auto$mpg[10]
summary(auto)
str(auto)
plot(mpg,cylinders)
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(origin,mpg)
Boston
library(Mass)
library(MASS)
Boston
str(Boston)
?Boston
load(Boston)
fix(Boston)
pair(Boston$black,Boston$crim)
pairs(Boston$black,Boston$crim)
pairs(~Boston$black + Boston$crim)
summary(crim)
summary(Boston$crim)
summary(Boston$black)
savehistory()
str(Boston)
library(MASS)
str(Boston)
pairs(Boston)
?Boston
Boston[1,]
plot(Boston$zn,Boston$crim)
Boston[zn=0]
Boston(zn=0)
Boston[zn=0,]
Boston[Boston$zn=0,]
Boston[Boston$zn==0,]
str(Boston)
plot(Boston$zn,Boston$ptratio)
pairs(Boston$zn,Boston$crim)
pairs(~Boston$zn,Boston$crim)
pairs(~Boston$zn+Boston$crim)
pairs(~Boston$zn+Boston$ptratio)
pairs(~Boston$zn+Boston$tax)
pairs(~Boston$zn+Boston$chas)
savehistory()
quit
quit()
library(MASS)
str(Boston)
a=c[1,2,3,4]
a=c(1,2,3,4)
median(a)
med(Boston$ptratio)
median(Boston$ptratio)
summary(Boston$ptratio)
?Boston
summary(Boston$medv)
Boston[Boston$medv=min(Boston$medv)]
Boston[Boston$medv=min(Boston$medv),]
Boston[Boston$medv==min(Boston$medv),]
summary(Boston$lstat)
summary(Boston$black)
summary(Boston$tax)
summary(Boston$crim)
mean(a)
a=c(1,2,3,8,7)
mean(a)
median(a)
a=c(1,2,3,8,7,9)
mean(a)
median(a)
Boston[Boston$rm>7,]
count(Boston[Boston$rm>7,])
cnt(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>8,])
(Boston[Boston$rm>8,])
summary(Boston$crim)
savehistory()
summary(Boston$crim)
library(MASS)
library(ISLR)
install.packages("ISLR")
?Boston
fix(Boston)
fix(Boston)
?fix
names(Boston)
?Boston
lm.fit=lm(med~lstat)
lm.fit=lm(med~lstat,data=Boston)
lm.fit=lm(medv~lstat,data=Boston)
lm.fit
summary(lm.fit)
lm.fit$coefficients
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
?Boston
Boston$lstat[1,1]
Boston$lstat[1]
predict(lm.fit,data.frame(lstat=c(5,10,15))),interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))),interval="confidence")
summary(boston?medv)
summary(Boston?medv)
summary(Boston$medv)
summary(Boston$lstat)
install.packages("ISLR")
plot(Boston$medv,Boston$lstat)
?Boston
plot(Boston$lstat,Boston$medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(Boston$lstat,Boston$medv,col="red")
plot(Boston$lstat,Boston$medv,pch=20)
plot(Boston$lstat,Boston$medv,pch="+")
plot(Boston$lstat,Boston$medv,pch="*")
plot(Boston$lstat,Boston$medv,pch="R")
plot(Boston$lstat,Boston$medv,pch="/")
plot (1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),restudent(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(plot(hatvalues(lm.fit)))
which.max(hatvalues(lm.fit))
21126909
8663166526
savehistory()
exit
quit
quit
quit()
library(MASS)
quit()
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
library(XML)
etf.table= readHTMLTable(etf)
etf.table
str(etf.table)
etf = "finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
etf = "http://finance.yahoo.com/etf/lists/category/"
etf.table= readHTMLTable(etf)
u = "http://en.wikipedia.org/wiki/List_of_countries_by_population"
tables = readHTMLTable(u)
tables
names(tables)
tables[[2]]
tmp = tables[[2]]
tmp
airline = "http://www.theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
airline.table = readHTMLTable(airline, header=T, which=1,stringsAsFactors=F)
View(airline.table)
airline.table = readHTMLTable(airline)
etf.table= readHTMLTable(etf,header=T,which=1,stringsAsFactors=F)
etf
tables = readHTMLTable(u,stringsAsFactors=F)
tables
etf.table= readHTMLTable(etf,stringsAsFactors=F)
etf.table
etf.table= readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etf.table)
etf.table= readHTMLTable(etf,which=2,stringsAsFactors=F)
View(etf.table)
etf.table
install.packages("RCurl")
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
library("zoo")
library("fPortfolio")
library("PerformanceAnalytics")
?maxreturnPortfolio
??maxreturnPortfolio
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/Analytics/R-code/portfolio_optimization_prediction/CG_CVAR_portman.R')
numfolds
source('D:/Analytics/Analytics_edge/Trees/courtcases/courtcases.R')
numfolds
setwd("D:/Analytics/Analytics_edge/trees/claims")
claims = read.csv("ClaimsData.csv")
str(claims)
table(claims$bucket2009)
table(claims$bucket2009)/nrow(claims)
library(caTools)
set.seed(88)
spl = sample.split(claims$bucket2009, SplitRatio = 0.6)
claimstrain = subset(claims,spl == T)
claimstest = subset(claims,spl == F)
str(claimstrain)
table(claimstest$bucket2009, claimstest$bucket2008)
accuracy = (110138 + 10721 + 2774 + 1539 + 104 )/nrow(claimstest)
accuracy
penaltymatrix = matrix(c(0,1,2,3,4,2,0,1,2,3,4,2,0,1,2,6,4,2,0,1,8,6,4,2,0),byrow=T,nrow=5)
penaltymatrix
as.matrix(table(claimstest$bucket2009, claimstest$bucket2008))
as.matrix(table(claimstest$bucket2009, claimstest$bucket2008)) * penaltymatrix
sum(as.matrix(table(claimstest$bucket2009, claimstest$bucket2008)) * penaltymatrix)/nrow(claimstest)
avgage = mean(claimstrain$age)
avgage
table(claimstrain$Diabetes)
str(claimstrain)
table(claimstrain$diabetes)
104672/nrow(claimstrain)
table(claimstest$bucket2009)
122978/nrow(claimstest)
table(claimstest$bucket2009, claimstest$bucket2008)
str(claimstest$bucket2009)
table(claimstest$bucket2009 == 1, claimstest$bucket2009)
table(claimstest$bucket2009 == 1, claimstest$bucket2008)
table(claimstest$bucket2009 == 1, claimstest$bucket2009)
penaltyerror = sum(as.matrix(table(claimstest$bucket2009==1, claimstest$bucket2008)) * penaltymatrix)/nrow(claimstest)
penaltymatrix
penaltyerror = sum(as.matrix(table(claimstest$bucket2009==1, claimstest$bucket2008)) * penaltymatrix[1:2])/nrow(claimstest)
penaltyerror
penaltyerror = (0*122978 + 2*34840 + 4*16390 + 6*7937 + 8*1057)/nrow(ClaimsTest)
penaltyerror = (0*122978 + 2*34840 + 4*16390 + 6*7937 + 8*1057)/nrow(claimstest)
penaltyerror
library(rpart)
library(rpart.plot)
claimstree = rpart(bucket2009 ~ age + arthritis + alzheimers + cancer + copd + depression + diabetes + heart.failure + ihd + kidney + osteoporosis + stroke + bucket2008 + reimbursement2008, data=claimstrain , method="class" , cp=0.00005)
prp(claimstree)
predicttest = predict(claimstree , newdata=claimstest , type="class")
table(claimstest$bucket2009 , predicttest)
accuracy = (114141 + 16102 + 118 + 201)/nrow(claimstest)
accuracy
penaltyerror = sum(as.matrix(table(claimstest$bucket2009 , predicttest)) * penaltymatrix)/nrow(claimstest)
penaltyerror
claimstree = rpart(bucket2009 ~ age + arthritis + alzheimers + cancer + copd + depression + diabetes + heart.failure + ihd + kidney + osteoporosis + stroke + bucket2008 + reimbursement2008, data=claimstrain , method="class" , cp=0.00005,parms=list(loss=penaltymatrix)))
claimstree = rpart(bucket2009 ~ age + arthritis + alzheimers + cancer + copd + depression + diabetes + heart.failure + ihd + kidney + osteoporosis + stroke + bucket2008 + reimbursement2008, data=claimstrain , method="class" , cp=0.00005,parms=list(loss=penaltymatrix))
predicttest = predict(claimstree , newdata=claimstest , type="class")
table(claimstest$bucket2009 , predicttest)
accuracy = (94310 + 18942 + 4692 + 636 + 2)/nrow(claimstest)
accuracy
penaltyerror = sum(as.matrix(table(claimstest$bucket2009 , predicttest)) * penaltymatrix)/nrow(claimstest)
penaltyerror
setwd("D:/Analytics/Analytics_edge/trees/location")
location = read.csv("location.csv")
boston = read.csv("boston")
str(boston)
boston = read.csv("boston.csv")
str(boston)
plot(boston$LAT , boston$LON)
plot(boston$LAT(boston$CHAS == 1) , boston$LON(boston$CHAS == 1),col="blue",pch=19)
points(boston$LAT(boston$CHAS == 1) , boston$LON(boston$CHAS == 1),col="blue",pch=19)
points(boston$LON(boston$CHAS == 1) , boston$LAT(boston$CHAS == 1),col="blue",pch=19)
plot(boston$LAT , boston$LON)
points(boston$LON(boston$CHAS == 1) , boston$LAT(boston$CHAS == 1),col="blue",pch=19)
points(boston$LON(boston$CHAS==1) , boston$LAT(boston$CHAS==1),col="blue",pch=19)
points(boston$LON(boston$CHAS==1) ,boston$LAT(boston$CHAS==1),col="blue",pch=19)
plot(boston$LON , boston$LAT)
points(boston$LON(boston$CHAS==1) ,boston$LAT(boston$CHAS==1),col="blue",pch=19)
points(boston$LON[boston$CHAS==1] ,boston$LAT[boston$CHAS==1],col="blue",pch=19)
points(boston$LON[boston$TRACT==3531] ,boston$LAT[boston$TRACT==3531],col="red",pch=19)
summary(NOX)
summary(boston$NOX)
points(boston$LON[boston$NOX >= 0.55] ,boston$LAT[boston$NOX >= 0.55],col="green",pch=19)
plot(boston$LON , boston$LAT) ## resetting
summary(boston$medv)
summary(boston$MEDV)
points(boston$LON[boston$MEDV >= 21.2] ,boston$LAT[boston$MEDV >= 21.2],col="red",pch=19)
plot(boston$LAT , boston$MEDV)
plot(boston$LON , boston$MEDV)
latlonlm = lm(MEDV ~ LAT + LON, data=boston)
summary(latlonm)
summary(latlonlm)
plot(boston$LON , boston$LAT)
points(boston$LON[boston$MEDV >= 21.2] ,boston$LAT[boston$MEDV >= 21.2],col="red",pch=19)
latlonlm$fitted.values
points(boston$LON[latlonlm$fitted.values >= 21.2] ,boston$LAT[latlonlm$fitted.values >= 21.2],col="blue",pch="$")
library(rpart)
library(rpart.plot)
latlontree = rpart(MEDV ~ LAT + LON , data=boston)
summary(latlontree)
prp(latlontree)
plot(boston$LON , boston$LAT)
points(boston$LON[boston$MEDV >= 21.2] ,boston$LAT[boston$MEDV >= 21.2],col="red",pch=19)
fittedvalues = predict(latlontree)
fittedvalues
points(boston$LON[fittedvalues >= 21.2] ,boston$LAT[fittedvalues >= 21.2],col="blue",pch="$")
latlontree = rpart(MEDV ~ LAT + LON , data=boston, minbucket=50)
plot(latlontree)
text(latlontree)
plot(boston$LON , boston$LAT)
abline(v=-71.07)
abline(h=-42.21)
abline(h=42.21)
abline(h=42.17)
points(boston$LON[boston$MEDV >= 21.2] ,boston$LAT[boston$MEDV >= 21.2],col="red",pch=19)
library(caTools)
set.seed(123)
split = sample.split(boston$MEDV,SplitRatio=0.7)
train = subset(boston,split==T)
test = subset(boston,split==F)
+ str(train)
linreg = lm(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + RM + AGE + DIS + RAD + PTRATIO, data=train)
summary(linreg)
linreg.predict = predict(linreg , newdata=test)
linreg.sse = sum((linreg.predict - test$MEDV)^2)
linreg.sse
set.seed(123)
split = sample.split(boston$MEDV,SplitRatio=0.7)
train = subset(boston,split==T)
test = subset(boston,split==F)
linreg = lm(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + RM + AGE + DIS + RAD + PTRATIO, data=train)
summary(linreg)
linreg.predict = predict(linreg , newdata=test)
linreg.sse = sum((linreg.predict - test$MEDV)^2)
linreg.sse
tree = rpart(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + RM + AGE + DIS + RAD + PTRATIO, data=train)
prp(tree)
tree.predict = predict(tree , newdata=test)
tree.sse = sum((tree.predict - test$MEDV)^2)
tree.sse
library(caret)
library(e1071)
tr.control = trainControl(method = "CV" , number=10)
cp.grid = expand.grid(.cp=(0:10)*0.001)
tr = train(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + RM + AGE + DIS + RAD + PTRATIO, data=train , method = "rpart" , trcontrol = tr.control , tuneGrid = cp.grid)
tr = train(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + RM + AGE + DIS + RAD + PTRATIO, data=train , method = "rpart" , trcontrol = tr.Control , tuneGrid = cp.grid)
tr = train(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + RM + AGE + DIS + RAD + PTRATIO, data=train , method = "rpart" , trControl = tr.control , tuneGrid = cp.grid)
tr
best.tree = tr$finalModel
best.tree
prp(best.tree)
best.tree.pred = predict(best.tree , newdata=test)
best.tree.sse = sum((best.tree.predict - test$MEDV)^2)
best.tree.sse = sum((best.tree.pred - test$MEDV)^2)
best.tree.sse
quit()
