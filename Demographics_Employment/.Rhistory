tables = readHTMLTable(u)
tables
names(tables)
tables[[2]]
tmp = tables[[2]]
tmp
airline = "http://www.theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
airline.table = readHTMLTable(airline, header=T, which=1,stringsAsFactors=F)
View(airline.table)
airline.table = readHTMLTable(airline)
etf.table= readHTMLTable(etf,header=T,which=1,stringsAsFactors=F)
etf
tables = readHTMLTable(u,stringsAsFactors=F)
tables
etf.table= readHTMLTable(etf,stringsAsFactors=F)
etf.table
etf.table= readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etf.table)
etf.table= readHTMLTable(etf,which=2,stringsAsFactors=F)
View(etf.table)
etf.table
install.packages("RCurl")
etf_test = "http://finance.yahoo.com/etf/lists/category/"
etf = "http://finance.yahoo.com/etf/lists/category/"
etftbl=readHTMLTable(etf)
library(XML)
etftbl=readHTMLTable(etf)
etftbl
etf="http://finance.yahoo.com/etf/lists/?cat=$FECA$IC$$"
etftbl=readHTMLTable(etf)
etftbl
etftbl=readHTMLTable(etf,which=3)
etftbl=readHTMLTable(etf,which=1)
View(etftbl)
etftbl=readHTMLTable(etf,which=2)
etftbl
etf="http://finance.yahoo.com"
etftbl=readHTMLTable(etf)
etftbl
etf="http://news.morningstar.com/etf/Lists/ETFReturns.html"
etftbl=readHTMLTable(etf)
etftbl
etftbl=readHTMLTable(etf,which=1)
View(etftbl)
View(etftbl)
etftbl=readHTMLTable(etf,which=2)
View(etftbl)
etftbl=readHTMLTable(etf,which=3)
View(etftbl)
str(etftbl)
names(etftbl)
etftbl=readHTMLTable(etf,Header=T,which=3)
etftbl=readHTMLTable(etf,header=T,which=3)
etftbl=readHTMLTable(etf,which=3)
rm(Boston)
etftbl=readHTMLTable(etf,which=3)
etftbl=readHTMLTable(etf,header=T,which=3)
etftbl=readHTMLTable(etf,which=3)
rm(airline)
rm(airline.table)
rm(lm.fit)
rm(tmp)
rm(u)
rm(tables)
etftbl=readHTMLTable(etf,which=3)
etftbl=readHTMLTable(etf,which=3,header=T)
etftbl=readHTMLTable(etf,which=3,header=T)
View(etftbl)
etftbl[1,]
namesetftbl[1,]
names(etftbl[1,])
etftbl[1,1]
str(etftbl)
class(etftable)
class(etftable)
etftbl=readHTMLTable(etf,which=3,stringsAsFactors=F)
View(etftbl)
etf="https://www.nyse.com/listings_directory/etf"
etftbl=readHTMLTable(etf)
etf="http://news.morningstar.com/fund-category-returns/"
etftbl=readHTMLTable(etf)
etftbl
etftbl=readHTMLTable(etf,which=1)
View(etftbl)
names(etftbl)
etftbl=readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etftbl)
names(etftbl(is.na(1 Month(%))))
is.na(etf$1 Month(%))
names(etf)
names(etftbl)
names(etftbl)[1]
names(etftbl)[2] = "1_Month(%)"
is.na(etf$1_Month(%))
names(etftbl)[2] = "1_Month"
is.na(etf$1_Month
is.na(etf$1_Month)
etf$1_Month=as.numeric(etf$1_month)
str(etftbl)
paste(etf$1_month)
etf$1_month[1]
etf$1_month[1,]
names(etftbl)[2] = "1Month"
etf$1month[1,]
names(etftbl)[2] = "oneMonth"
etf$onemonth[1]
etf$onemonth[1,]
etftbl$onemonth[1]
etftbl$onemonth[2]
str(etftbl)
etftbl$oneMonth[2]
etftbl$oneMonth[1]
names(etftbl)[2] = "1 Month(%)"
etftbl$oneMonth[1]
str(etftbl)
etftbl$1 Month(%)[1]
names(etftbl)[2] = "1_Month(%)"
etftbl$1_Month(%)[1]
names(etftbl)[2] = "one_Month(%)"
etftbl$one_Month(%)[1]
names(etftbl)[2] = "one_Month_per"
etftbl$one_Month_per[1]
is.na(etftbl$one_Month_per)
is.na(etftbl$one_Month_per)==TRUE
table(is.na(etftbl$one_Month_per))
table(etftbl$Name,is.na(etftbl$one_Month_per)))
table(etftbl$Name,is.na(etftbl$one_Month_per))
etftbl$Name[is.na(etftbl$one_Month_per),]
?ifelse
ifelse(is.na(etftbl$one_Month_per),efttbl$Name)
ifelse(is.na(etftbl$one_Month_per),etftbl$Name)
ifelse(is.na(etftbl$one_Month_per),etftbl$Name,"nothing")
a=if is.na(etftbl$one_Month_per) etftbl$Name
ifelse(is.na(etftbl$one_Month_per),"valid","nothing")
?indexof
which(is.na(etftbl$one_Month_per)
)
etftbl$Name[which(is.na(etftbl$one_Month_per))]
etftbl$Name[1]
etftbl$Name[2]
etftbl$Name
str(etftbl)
names(etftbl)
names(etftbl)[1]
names(etftbl)[1]="Name"
which(is.na(etftbl$one_Month_per)
)
etftbl$Name[which(is.na(etftbl$one_Month_per))]
summary(etftbl)
class(etftbl)
a=get.hist.quote( "LQD", 2014-08-01", "2014-12-01", provider="morningstar", compression="w", quote="AdjClose", quiet=T)
a=get.hist.quote( "LQD", "2014-08-01", "2014-12-01", provider="morningstar", compression="w", quote="AdjClose", quiet=T)
library("PerformanceAnalytics")
a=get.hist.quote( "LQD", "2014-08-01", "2014-12-01", provider="morningstar", compression="w", quote="AdjClose", quiet=T)
library("tseries")
a=get.hist.quote( "LQD", "2014-08-01", "2014-12-01", provider="morningstar", compression="w", quote="AdjClose", quiet=T)
table(is.na(cps$MetroAreaCode))
table(is.na(cps$MetroAreaCode)
)
## Demographics and Employment
setwd("D:/Analytics/Analytics_edge/Demographics_Employment")
## Reading the csv files
cps=read.csv("CPSData.csv")
metro=read.csv("MetroAreaCodes.csv")
country=read.csv("CountryCodes.csv")
table(is.na(cps$MetroAreaCode))
table(tapply(is.na(cps$MetroAreaCode)),mean)
summary(cps)
table(tapply(is.na(cps$MetroAreaCode)),cps$State,mean)
tapply(is.na(cps$MetroAreaCode),cps$State,mean)
tapply(is.na(cps$MetroAreaCode),cps$State,mean) < 0.40
(tapply(is.na(cps$MetroAreaCode),cps$State,mean)) < 0.40
a=tapply(is.na(cps$MetroAreaCode),cps$State,mean)
str(a)
names(a)
a
summary(a)
dim(a)
a[1]
which(tapply(is.na(cps$MetroAreaCode),cps$State,mean) > 0.75)
sort(tapply(is.na(cps$MetroAreaCode),cps$State,mean))
summary(metro)
str(metro)
summary(country)
str(country)
cps = merge(cps, metro, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
summary(
summary(cps)
)
summary(cps)
str(cps)
table(cps$MetroArea)
sort(table(cps$MetroArea))
summary(cps)
tapply(cps$Hispanic==1,MetroArea,mean)
tapply(cps$Hispanic==1,cps$MetroArea,mean)
sort(tapply(cps$Hispanic==1,cps$MetroArea,mean))
tapply(cps$Race=="Asian",cps$MetroArea,mean)
sort(tapply(cps$Race=="Asian",cps$MetroArea,mean))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean,na.rm=T))
sort(tapply(cps$Education == "No high school diploma", cps$MetroArea, mean,na.rm=T))
summary(cps)
summary(country)
cps=(cps,country,by.x=CountryOfBirthCode,by.y=Code,all.x=T)
cps=merge(cps,country,by.x=CountryOfBirthCode,by.y=Code,all.x=T)
cps=merge(cps,country,by.x=CountryOfBirthCode,by.y=Code,all.x=T)
summary(cps)
cps=merge(cps,country,by.x=CountryOfBirthCode,by.y=Code,all.x=T)
cps = merge(cps, country, by.x="CountryOfBirthCode", by.y="Code",all.x=T)
summary(cps)
table(cps$Country)
sort(table(cps$Country))
table(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",cps$Country !="United States")
table(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",cps$Country !="United States",na.rm=T)
which(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",na.rm=T)
tapply(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",cps$Country ="United States",mean,na.rm=T)
tapply(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",cps$Country =="United States",mean,na.rm=T)
tapply(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",cps$Country,mean,na.rm=T)
sort(tapply(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",cps$Country,mean,na.rm=T))
cps$Country[which((cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA"))]
table(cps$Country[which((cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA"))])
cps$Country[which((cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA"))] =="United States"
table(cps$Country[which((cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA"))] =="United States")
(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA" && cps$Country!= "United States")
(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA" & cps$Country!= "United States")
table(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA" & cps$Country != "United States")
cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA"
table(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA")
table(cps$Country[which(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA")])
summary(cps$Country[which(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA")])
cps$Country[which(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA")
)
table(cps$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA")
5409 - 3736
1673/5409
table(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country != "United States")
table(cps$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country != "United States")
summary(cps)
cps$Country=="INDIA"
summary(cps)
cps$MetroArea[which(cps$Country=="India")]
table(cps$MetroArea[which(cps$Country=="India")])
sort(table(cps$MetroArea[which(cps$Country=="India")]))
sort(table(cps$MetroArea[which(cps$Country=="Brazil")]))
sort(table(cps$MetroArea[which(cps$Country=="Somalia")]))
etf
etf = "http://news.morningstar.com/fund-category-returns/"
etf.table= readHTMLTable(etf)
etf = "http://news.morningstar.com/fund-category-returns/"
etf.table= readHTMLTable(etf,which=3,stringsAsFactors=F)
etf.table= readHTMLTable(etf,which=3,stringsAsFactors=F)
etf.table= readHTMLTable(etf,which=3,stringsAsFactors=F)
library(XML)
etf.table= readHTMLTable(etf,which=3,stringsAsFactors=F)
etf.table=readHTMLTable(etf,which=3,stringsAsFactors=F)
etf.table=readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etf.table)
etf="http://news.morningstar.com/etf/Lists/ETFReturns.html"
etf.table=readHTMLTable(etf,which=1,stringsAsFactors=F)
etf.table=readHTMLTable(etf,which=1,stringsAsFactors=F)
etf.table=readHTMLTable(etf,which=1,stringsAsFactors=F)
View(etf.table)
etf.table=readHTMLTable(etf,which=2,stringsAsFactors=F)
etf.table=readHTMLTable(etf,which=3,stringsAsFactors=F)
View(etf.table)
etf = "http://news.morningstar.com/etf/Lists/ETFReturns.html"
etf.table= readHTMLTable(etf,which=3,stringsAsFactors=F)
View(etf.table)
rm(etf)
rm(etf.table)
rm(etftbl)
etf_return = "http://news.morningstar.com/etf/Lists/ETFReturns.html"
etf_return.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
etf_return = "http://news.morningstar.com/etf/Lists/ETFReturns.html"
etf_return.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
View(etf_return.table)
View(funds_return.table)
etf_return.table[,1]
etf_return.table[,2]
str(etf_return.table)
rm(etf_return.table[,1])
etf_return.table[2,]
etf_return.table[2,]=NULL
etf_return.table[2,]=list(NULL)
names(etf_return.table[c(2,23),])="drop"
str(etf_return.table)
summary(etf_return.table)
rownames(etf_return.table[c(2,23),])="drop"
row.names(etf_return.table[c(2,23),])
etf_return.table$2=NULL
row.names(etf_return.table[c(2,23),])="DROP"
dim(etf_return.table)
nrow(etf_return.table)
row.names(etf_return.table)
etf_return.table[2,] <-- NULL
a=etf_return.table[c(1,3:22),]
View(a)
str(a)
View(a)
a[1,]
summary(a)
a=etf_return.table[c(1,3:22),2:11]
View(a)
row.names(a)
col.names(a)=a[1,]
colnames(a)=a[1,]
colnames(a)
View(a)
nr_etf=nrow(etf_return_raw.table) -1
etf_return = "http://news.morningstar.com/etf/Lists/ETFReturns.html"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
etf_return = "http://news.morningstar.com/etf/Lists/ETFReturns.html"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
rm(etf_return.table)
rm(funds_return.table)
nr_etf=nrow(etf_return_raw.table) -1
nr_etf
nc_etf=ncol(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table)
nc_etf
etf_return.table=etf_return_raw.table[c(1,3:nr_etf,2:ncol_etf]
etf_return.table=etf_return_raw.table[c(1,3:nr_etf),2:ncol_etf]
etf_return.table=etf_return_raw.table[c(1,3:nr_etf),2:nc_etf]
View(etf_return_raw.table)
View(etf_return_raw.table)
View(etf_return.table)
colnames(etf_return.table)=etf_return.table[1,]
View(etf_return.table)
etf_return.table[,1]
nc_etf=ncol(etf_return_raw.table) -1
etf_return.table=etf_return_raw.table[c(1,3:nr_etf),2:nc_etf] ## remove rows and columns having na values
colnames(etf_return.table)=etf_return.table[1,] ## set column names
rownames(etf_return.table)=etf_return.table[,1] ## set row names
etf_return.table=etf_return.table[,2:nc_etf]
str(etf_return.table)
etf_return.table[,2:nc_etf]
etf_return.table[,2:9]
nc_etf
etf_return.table=etf_return.table[,2:(nc_etf-1)]
View(etf_return.table)
View(funds_return_raw.table)
summary(etf_return.table)
table(etf_return.table$Category)
nr_etf
etf_return.table=etf_return_raw.table[c(1,3:nr_etf),2:nc_etf] ## remove rows and columns having na values
colnames(etf_return.table)=etf_return.table[1,] ## set column names
rownames(etf_return.table)=etf_return.table[,1] ## set row names
etf_return.table=etf_return.table[1:(nr_etf-1),]
etf_return.table=etf_return.table[,2:(nc_etf-1)]
View(etf_return_raw.table)
View(etf_return.table)
a="http://finance.yahoo.com/etf/lists/"
b=readHTMLTable(a,which=1,stringsAsFactors=F)
b=readHTMLTable(a,which=1,stringsAsFactors=F)
b=readHTMLTable(a,which=1,stringsAsFactors=F)
View(b)
b=readHTMLTable(a,stringsAsFactors=F)
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=1000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
## Data cleansing
etf_return.table=etf_return_raw.table[c(1,3:nr_etf),2:nc_etf] ## remove rows and columns having na values
colnames(etf_return.table)=etf_return.table[1,] ## set column names
rownames(etf_return.table)=etf_return.table[,1] ## set row names
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
View(etf_return_raw.table)
etf_return.table=unique(etf_return_raw.table)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
## Data cleansing
etf_return.table=unique(etf_return_raw.table)
funds_return.table=unique(funds_return_raw.table)
etf_return.table=etf_return_raw.table[c(1,3:nr_etf),2:nc_etf] ## remove rows and columns having na values
colnames(etf_return.table)=etf_return.table[1,] ## set column names
rownames(etf_return.table)=etf_return.table[,1] ## set row names
etf_return_raw.table = unique(etf_return_raw.table)
funds_return_raw.table = unique(funds_return_raw.table)
etf_return.table=unique(etf_return_raw.table)
funds_return.table=unique(funds_return_raw.table)
etf_return.table=etf_return_raw.table[c(1,3:nr_etf),2:nc_etf] ## remove rows and columns having na values
colnames(etf_return.table)=etf_return.table[1,] ## set column names
rownames(etf_return.table)=etf_return.table[,1] ## set row names
View(etf_return.table)
View(etf_return_raw.table)
etf_return.table=unique(etf_return_raw.table)
View(etf_return.table)
etf_return.table[1,1]
etf_return.table[2,1]
etf_return.table[3,1]
etf_return.table[3,1:2]
str(etf_return.table)
View(etf_return_raw.table)
etf_return = "http://news.morningstar.com/etf/lists/ETFReturns.html?topNum=All&lastRecNum=100000&curField=8&category=0"
etf_return_raw.table = readHTMLTable(etf_return,which=3,stringsAsFactors=F)
funds_return ="http://news.morningstar.com/fund-category-returns"
funds_return_raw.table = readHTMLTable(funds_return,which=1,stringsAsFactors=F)
nr_etf=nrow(etf_return_raw.table) -1
nc_etf=ncol(etf_return_raw.table) -1
View(etf_return_raw.table)
etf_return_raw.table[1684,]
etf_return.table=unique(etf_return_raw.table)
funds_return.table=unique(funds_return_raw.table)
View(etf_return.table)
etf_return.table[1,]
colnames(etf_return.table)=etf_return.table[1,] ## set column names
View(etf_return.table)
rownames(etf_return.table)=etf_return.table[,2] ## set row names
etf_return.table=etf_return_raw.table[c3:nr_etf,] ## remove rows na values and headers
etf_return.table=etf_return_raw.table[3:nr_etf,] ## remove rows na values and headers
View(etf_return.table)
etf_return.table=unique(etf_return_raw.table)
colnames(etf_return.table)=etf_return.table[1,] ## set column names
etf_return.table[1,]
etf_return.table=unique(etf_return_raw.table)
colnames(etf_return.table)
etf_return.table[1,]
colnames(etf_return.table)=etf_return.table[1,] ## set column names
colnames(etf_return.table)
etf_return.table[1,]
View(etf_return.table)
etf_return.table=unique(etf_return_raw.table)
colnames(etf_return.table)=etf_return.table[1,] ## set column names
etf_return.table=etf_return_raw.table[2:nr_etf,2:nc_etf] ## remove rows na values an
View(etf_return.table)
etf_return.table=unique(etf_return_raw.table)
colnames(etf_return.table)=etf_return.table[1,] ## set column names
View(etf_return.table)
etf_return.table=etf_return_raw.table[,2:nc_etf] ## remove rows na values an
View(etf_return.table)
etf_return.table=unique(etf_return_raw.table)
etf_return.table=etf_return_raw.table[,2:nc_etf] ## remove rows na values an
colnames(etf_return.table)=etf_return.table[1,] ## set column names
View(etf_return.table)
funds_return.table=unique(funds_return_raw.table)
etf_return.table=etf_return_raw.table[,2:nc_etf] ## remove rows na values an
View(etf_return.table)
colnames=etf_return.table[1,]
View(colnames)
View(etf_return.table)
rownmaes=etf_return.table[,3:nc_etf]
funds_return.table=unique(funds_return_raw.table)
colnames=etf_return.table[1,]
View(colnames)
rownmaes=etf_return.table[,3:nc_etf]
View(etf_return.table)
etf_return.table=unique(etf_return_raw.table)
View(etf_return.table)
colnames=etf_return.table[1,]
rownmaes=etf_return.table[,3:nc_etf]
View(rownmaes)
etf_return.table=etf_return_raw.table[c(1),2:nc_etf] ## remove rows na values an
etf_return.table=unique(etf_return_raw.table)
colnames=etf_return.table[1,]
rownmaes=etf_return.table[,3:nc_etf]
rownames
rownmaes=etf_return.table[3:nc_etf,]
View(rownmaes)
rownames
etf_return.table=unique(etf_return_raw.table)
etf_return.table=etf_return_raw.table[,2:nc_etf] ## remove rows na values an
View(etf_return.table)
etf_return.table=etf_return_raw.table[c(1,2:nc_etf),] ## remove rows na values an
etf_return.table=unique(etf_return_raw.table)
etf_return.table=etf_return.table[,2:nc_etf] ## remove rows na values an
etf_return.table=etf_return.table[c(1,2:nc_etf),] ## remove rows na values an
etf_return.table=unique(etf_return_raw.table)
etf_return.table=etf_return.table[,2:nc_etf] ## remove rows na values an
etf_return.table=etf_return.table[c(1,2:nr_etf),] ## remove rows na values an
View(etf_return.table)
colnames(etf_return.table)=etf_return.table[1,] ## set column names
View(etf_return.table)
etf_return.table=unique(etf_return_raw.table)
etf_return.table=etf_return.table[,2:nc_etf] ## remove rows na values an
etf_return.table=etf_return.table[c(1,3:nr_etf),] ## remove rows na values an
etf_return.table=etf_return_raw.table[c(1),2:nc_etf] ## remove rows na values an
etf_return.table=unique(etf_return_raw.table)
etf_return.table=etf_return.table[,2:nc_etf] ## remove rows na values an
etf_return.table=etf_return.table[c(1,3:nr_etf),] ## remove rows na values an
View(etf_return.table)
colnames(etf_return.table)=etf_return.table[1,] ## set column names
View(etf_return.table)
a=etf_return.table[2:nrow(etf_return.table),]
View(a)
etf_return.table=etf_return.table[2:nrow(etf_return.table),]
View(etf_return.table)
row.names(etf_return.table)=etf_return.table[,1]
table(etf_return.table$Name=="SPDRÂ® S&P 500 ETF (SPY)")
row.names(etf_return.table)
etf_return.table[1681,]
etf_return.table=unique(etf_return_raw.table)
etf_return.table=etf_return.table[,2:nc_etf] ## remove rows na values an
etf_return.table[1681,]
etf_return.table[1682,]
etf_return.table[1683,]
str(etf_return.table)
etf_return.table=unique(etf_return_raw.table)
etf_return.table[1684,]
